global main
extern printf, malloc, strcpy, scanf, strlen, sscanf, sprintf, memcpy, strcmp, puts
SECTION .text
testMember:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
testMember.0.enter:
     mov                  rsi,                  rdi
    push                  rsi
     mov                  rdi,                   32
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov                   r8,                  rbx
     mov                  rdi,                    0
     cmp                  rdi,                  rsi
      jl testMember.1.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,      qword [rbx - 0]
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp    testMember.5.exit
testMember.1.loop_body:
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                   r9,                  rax
     mov      qword [r8 + 24],                   r9
     mov                   r8,      qword [r8 + 24]
     add                  rdi,                    1
     cmp                  rdi,                  rsi
      jl testMember.1.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,      qword [rbx - 0]
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp    testMember.5.exit
testMember.2.loop_increment:
     add                  rdi,                    1
     cmp                  rdi,                  rsi
      jl testMember.1.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,      qword [rbx - 0]
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp    testMember.5.exit
testMember.3.loop_condition:
     cmp                  rdi,                  rsi
      jl testMember.1.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,      qword [rbx - 0]
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp    testMember.5.exit
testMember.4.loop_exit:
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,      qword [rbx - 0]
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
testMember.5.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
testInstructionSelection:
    push                  rbp
     mov                  rbp,                  rsp
    push                  r12
    push                  r13
    push                  rbx
     sub                  rsp,                    0
testInstructionSelection.0.enter:
     mov                  rbx,                  rdi
     mov                  rsi,                  rbx
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                  rbx
     add                  rsi,                    8
     mov                  rdi,                  rbx
     add                  rdi,                    1
     sal                  rdi,                    3
    push                  rdi
    push                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                  rbx
     add                  rdi,                    8
     mov                   r8,                  rbx
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
    push                  rdi
    push                  rsi
     mov                  rdi,                   r8
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                   r8
     mov                   r8,                  rax
     mov       qword [r8 - 0],                  rbx
     add                   r8,                    8
     mov                  r10,                    0
     sal                  r10,                    3
     mov                   r9,                  rsi
     add                   r9,                  r10
     mov       qword [r9 - 0],                    1
     mov                  r10,                    1
     sal                  r10,                    3
     mov                   r9,                  rsi
     add                   r9,                  r10
     mov       qword [r9 - 0],                    2
     mov                   r9,                    0
     sal                   r9,                    3
     mov                  r10,                  rdi
     add                  r10,                   r9
     mov      qword [r10 - 0],                    2
     mov                   r9,                    1
     sal                   r9,                    3
     mov                  r10,                  rdi
     add                  r10,                   r9
     mov      qword [r10 - 0],                    1
     mov                  r10,                    0
     sal                  r10,                    3
     mov                   r9,                   r8
     add                   r9,                  r10
     mov       qword [r9 - 0],                    0
     mov                  r10,                    1
     sal                  r10,                    3
     mov                   r9,                   r8
     add                   r9,                  r10
     mov       qword [r9 - 0],                    0
     mov                   r9,                    2
     cmp                   r9,                  rbx
      jl testInstructionSelection.1.loop_body
     mov                  r10,                    0
     mov                   r9,                    0
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.1.loop_body:
     mov                  r11,                   r9
     sal                  r11,                    3
     mov                  r10,                  rsi
     add                  r10,                  r11
     mov                  r11,                   r9
     sub                  r11,                    1
     sal                  r11,                    3
     mov                  r12,                  rsi
     add                  r12,                  r11
     mov                  r12,      qword [r12 - 0]
    imul                  r12,                    4
     mov                  r11,                   r9
     sub                  r11,                    2
     mov                  r13,                  r11
     sal                  r13,                    3
     mov                  r11,                  rsi
     add                  r11,                  r13
     add                  r12,      qword [r11 - 0]
     mov                  r11,                  r12
     add                  r11,                    2
     and                  r11,              1048575
     mov      qword [r10 - 0],                  r11
     mov                  r11,                   r9
     sal                  r11,                    3
     mov                  r10,                  rdi
     add                  r10,                  r11
     mov                  r11,                   r9
     sub                  r11,                    1
     mov                  r12,                  r11
     sal                  r12,                    3
     mov                  r11,                  rdi
     add                  r11,                  r12
     mov                  r12,      qword [r11 - 0]
    imul                  r12,                    8
     mov                  r11,                    3
     add                  r11,                  r12
     mov                  r12,                   r9
     sub                  r12,                    2
     mov                  r13,                  r12
     sal                  r13,                    3
     mov                  r12,                  rsi
     add                  r12,                  r13
     add                  r11,      qword [r12 - 0]
     and                  r11,              1048575
     mov      qword [r10 - 0],                  r11
     mov                  r11,                   r9
     sal                  r11,                    3
     mov                  r10,                   r8
     add                  r10,                  r11
     mov                  r12,                   r9
     sal                  r12,                    3
     mov                  r11,                  rsi
     add                  r11,                  r12
     mov                  r12,                   r9
     sal                  r12,                    3
     mov                  r13,                  rdi
     add                  r13,                  r12
     mov                  r12,      qword [r13 - 0]
    imul                  r12,                    2
     mov                  r11,      qword [r11 - 0]
     add                  r11,                  r12
     and                  r11,              1048575
     mov      qword [r10 - 0],                  r11
     add                   r9,                    1
     cmp                   r9,                  rbx
      jl testInstructionSelection.1.loop_body
     mov                  r10,                    0
     mov                   r9,                    0
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.2.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  rbx
      jl testInstructionSelection.1.loop_body
     mov                  r10,                    0
     mov                   r9,                    0
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.3.loop_condition:
     cmp                   r9,                  rbx
      jl testInstructionSelection.1.loop_body
     mov                  r10,                    0
     mov                   r9,                    0
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.4.loop_exit:
     mov                  r10,                    0
     mov                   r9,                    0
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.5.loop_body:
     mov                  r11,                   r9
     sal                  r11,                    3
     mov                  r10,                  rsi
     add                  r10,                  r11
     mov                  r12,                   r9
     sal                  r12,                    3
     mov                  r11,                  rdi
     add                  r11,                  r12
     mov                  r12,      qword [r11 - 0]
    imul                  r12,                    2
     mov                  r11,      qword [r10 - 0]
     add                  r11,                  r12
     mov                  r12,                   r9
     sal                  r12,                    3
     mov                  r10,                   r8
     add                  r10,                  r12
     add                  r11,      qword [r10 - 0]
     mov                  r10,                  r11
     add                  r10,                    9
     and                  r10,              1048575
     add                   r9,                    1
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.6.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.7.loop_condition:
     cmp                   r9,                  rbx
      jl testInstructionSelection.5.loop_body
     mov                  rax,                  r10
     jmp testInstructionSelection.9.exit
testInstructionSelection.8.loop_exit:
     mov                  rax,                  r10
testInstructionSelection.9.exit:
     pop                  rbx
     pop                  r13
     pop                  r12
     add                  rsp,                    0
     pop                  rbp
     ret
SideEffectTester.getSelf:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
SideEffectTester.getSelf.0.enter:
     mov                  rbx,                  rdi
     add      qword [rbx - 0],                    1
     mov                  rax,                  rbx
SideEffectTester.getSelf.1.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
ConstructorTester.null:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
ConstructorTester.null.0.enter:
     mov                  rbx,                  rdi
     mov                  rsi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rbx - 0],                  rsi
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,     __string_const12
     mov                  rsi,                  rbx
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
ConstructorTester.null.1.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
testArray:
    push                  rbp
     mov                  rbp,                  rsp
    push                  r12
    push                  r14
    push                  r13
    push                  r15
    push                  rbx
     sub                  rsp,                  448
testArray.0.enter:
     mov      qword [rbp - 8],                  rdi
     mov                  rsi,                    2
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov     qword [rbp - 16],                  rbx
     mov     qword [rbp - 24],                  rbx
     sub                  rsi,                    8
     add     qword [rbp - 24],                  rsi
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.1.allocate_body:
     mov                  rdi,                    2
     add                  rdi,                    1
     sal                  rdi,                    3
    push                  rdi
    push                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  rdi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov     qword [rbp - 40],                  rsi
     mov     qword [rbp - 48],                  rsi
     sub                  rdi,                    8
     add     qword [rbp - 48],                  rdi
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.2.allocate_body:
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
    push                  rdi
    push                  rsi
     mov                  rdi,                   r8
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                   r8
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov     qword [rbp - 56],                  rdi
     mov     qword [rbp - 64],                  rdi
     sub                   r8,                    8
     add     qword [rbp - 64],                   r8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.3.allocate_body:
     mov                   r9,                    2
     add                   r9,                    1
     sal                   r9,                    3
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                   r9
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                   r8,                  rax
     mov       qword [r8 - 0],                    2
     add                   r8,                    8
     mov     qword [rbp - 72],                   r8
     mov     qword [rbp - 80],                   r8
     sub                   r9,                    8
     add     qword [rbp - 80],                   r9
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.4.allocate_body:
     mov                  r11,                    2
     add                  r11,                    1
     sal                  r11,                    3
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r11
    call               malloc
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     mov                   r9,                  rax
     mov       qword [r9 - 0],                    2
     add                   r9,                    8
     mov                  r10,                   r9
     mov     qword [rbp - 88],                   r9
     sub                  r11,                    8
     add     qword [rbp - 88],                  r11
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.5.allocate_body:
     mov                  r12,                    2
     add                  r12,                    1
     sal                  r12,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r11,                  rax
     mov      qword [r11 - 0],                    2
     add                  r11,                    8
     mov     qword [rbp - 96],                  r11
     mov    qword [rbp - 104],                  r11
     sub                  r12,                    8
     add    qword [rbp - 104],                  r12
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.6.allocate_body:
     mov                  r13,                    2
     add                  r13,                    1
     sal                  r13,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r13
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r12,                  rax
     mov      qword [r12 - 0],                    2
     add                  r12,                    8
     mov    qword [rbp - 112],                  r12
     mov    qword [rbp - 120],                  r12
     sub                  r13,                    8
     add    qword [rbp - 120],                  r13
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.7.allocate_body:
     mov                  r14,                    2
     add                  r14,                    1
     sal                  r14,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r14
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r13,                  rax
     mov      qword [r13 - 0],                    2
     add                  r13,                    8
     mov    qword [rbp - 128],                  r13
     mov    qword [rbp - 136],                  r13
     sub                  r14,                    8
     add    qword [rbp - 136],                  r14
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.8.allocate_body:
     mov                  r15,                    2
     add                  r15,                    1
     sal                  r15,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r15
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov      qword [r14 - 0],                    2
     add                  r14,                    8
     mov    qword [rbp - 144],                  r14
     mov    qword [rbp - 152],                  r14
     sub                  r15,                    8
     add    qword [rbp - 152],                  r15
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl testArray.9.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                  r14
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.9.allocate_body:
     mov                  r15,                    2
     add                  r15,                    1
     sal                  r15,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r15
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r15,                  rax
     mov      qword [r15 - 0],                    2
     add                  r15,                    8
     mov                  rcx,    qword [rbp - 144]
     mov      qword [rcx - 0],                  r15
     add    qword [rbp - 144],                    8
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl testArray.9.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                  r14
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.10.allocate_condition:
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl testArray.9.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                  r14
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.11.allocate_exit:
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                  r14
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.12.allocate_condition:
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl testArray.8.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.13.allocate_exit:
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                  r13
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.14.allocate_condition:
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl testArray.7.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.15.allocate_exit:
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.16.allocate_condition:
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl testArray.6.allocate_body
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.17.allocate_exit:
     mov      qword [r10 - 0],                  r11
     add                  r10,                    8
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.18.allocate_condition:
     cmp                  r10,     qword [rbp - 88]
      jl testArray.5.allocate_body
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.19.allocate_exit:
     mov                  rcx,     qword [rbp - 72]
     mov      qword [rcx - 0],                   r9
     add     qword [rbp - 72],                    8
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.20.allocate_condition:
     mov                  rax,     qword [rbp - 72]
     cmp                  rax,     qword [rbp - 80]
      jl testArray.4.allocate_body
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.21.allocate_exit:
     mov                  rcx,     qword [rbp - 56]
     mov      qword [rcx - 0],                   r8
     add     qword [rbp - 56],                    8
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.22.allocate_condition:
     mov                  rax,     qword [rbp - 56]
     cmp                  rax,     qword [rbp - 64]
      jl testArray.3.allocate_body
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.23.allocate_exit:
     mov                  rcx,     qword [rbp - 40]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 40],                    8
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.24.allocate_condition:
     mov                  rax,     qword [rbp - 40]
     cmp                  rax,     qword [rbp - 48]
      jl testArray.2.allocate_body
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.25.allocate_exit:
     mov                  rcx,     qword [rbp - 16]
     mov      qword [rcx - 0],                  rsi
     add     qword [rbp - 16],                    8
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.26.allocate_condition:
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,     qword [rbp - 24]
      jl testArray.1.allocate_body
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.27.allocate_exit:
     mov     qword [rbp - 32],                    0
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.28.loop_body:
     mov    qword [rbp - 160],                    0
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.29.loop_body:
     mov                  rsi,                    0
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.30.loop_body:
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.31.loop_body:
     mov                   r9,                    0
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.32.loop_body:
     mov                  r10,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.33.loop_body:
     mov                  r11,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.34.loop_body:
     mov                  r12,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.35.loop_body:
     mov                  r13,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.36.loop_body:
     mov                  r14,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.37.loop_body:
     mov                  r15,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.38.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.38.loop_body:
     mov                  rdi,    qword [rbp - 168]
     sal                  rdi,                    3
     mov    qword [rbp - 176],                  rbx
     add    qword [rbp - 176],                  rdi
     mov    qword [rbp - 184],                  rsi
     sal    qword [rbp - 184],                    3
     mov                  rcx,    qword [rbp - 176]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 184]
     mov    qword [rbp - 192],                   r8
     sal    qword [rbp - 192],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 192]
     mov    qword [rbp - 200],                   r9
     sal    qword [rbp - 200],                    3
     mov                  rax,      qword [rdi - 0]
     mov    qword [rbp - 208],                  rax
     mov                  rax,    qword [rbp - 200]
     add    qword [rbp - 208],                  rax
     mov                  rdi,                  r10
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 208]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 216],                  rax
     add    qword [rbp - 216],                  rdi
     mov                  rdi,                  r11
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 216]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 224],                  rax
     add    qword [rbp - 224],                  rdi
     mov                  rdi,                  r12
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 224]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 232],                  rax
     add    qword [rbp - 232],                  rdi
     mov                  rdi,                  r13
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 232]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 240],                  rax
     add    qword [rbp - 240],                  rdi
     mov    qword [rbp - 248],                  r14
     sal    qword [rbp - 248],                    3
     mov                  rcx,    qword [rbp - 240]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 248]
     mov    qword [rbp - 256],                  r15
     sal    qword [rbp - 256],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 256]
     mov                  rax,    qword [rbp - 168]
     mov    qword [rbp - 264],                  rax
     add    qword [rbp - 264],                  rsi
     mov    qword [rbp - 272],                   r8
     mov                  rax,    qword [rbp - 272]
    imul                  rax,                   r9
     mov    qword [rbp - 272],                  rax
     mov    qword [rbp - 280],                  r10
     add    qword [rbp - 280],                   93
     mov                  rax,    qword [rbp - 272]
     mov    qword [rbp - 288],                  rax
     mov                  rax,    qword [rbp - 288]
     mov                  rcx,    qword [rbp - 280]
     cqo
    idiv                  rcx
     mov    qword [rbp - 288],                  rax
     mov    qword [rbp - 296],                  r11
     add    qword [rbp - 296],                   93
     mov                  rax,    qword [rbp - 288]
     mov    qword [rbp - 304],                  rax
     mov                  rax,    qword [rbp - 304]
     mov                  rcx,    qword [rbp - 296]
     cqo
    idiv                  rcx
     mov    qword [rbp - 304],                  rdx
     mov                  rax,    qword [rbp - 264]
     mov    qword [rbp - 312],                  rax
     mov                  rax,    qword [rbp - 304]
     sub    qword [rbp - 312],                  rax
     mov                  rax,    qword [rbp - 312]
     mov    qword [rbp - 320],                  rax
     and    qword [rbp - 320],                  r12
     mov    qword [rbp - 328],                  r14
     add    qword [rbp - 328],                  r15
     mov    qword [rbp - 336],                  r13
     mov                  rax,    qword [rbp - 328]
     xor    qword [rbp - 336],                  rax
     mov                  rax,    qword [rbp - 320]
     mov    qword [rbp - 344],                  rax
     mov                  rax,    qword [rbp - 336]
      or    qword [rbp - 344],                  rax
     mov                  rax,    qword [rbp - 344]
     mov    qword [rbp - 352],                  rax
     not    qword [rbp - 352]
     mov                  rax,    qword [rbp - 352]
     mov      qword [rdi - 0],                  rax
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.38.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.39.loop_increment:
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.38.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.40.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.38.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.42.loop_increment:
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.43.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.37.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.45.loop_increment:
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.46.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.36.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.48.loop_increment:
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.49.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.35.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.51.loop_increment:
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.52.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.34.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.54.loop_increment:
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.55.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.33.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.57.loop_increment:
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.58.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.32.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.60.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.61.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.31.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.63.loop_increment:
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.64.loop_condition:
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.30.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.66.loop_increment:
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.67.loop_condition:
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.29.loop_body
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.68.loop_exit:
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.69.loop_body:
     mov                  rsi,                    0
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.70.loop_body:
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.71.loop_body:
     mov                   r9,                    0
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.72.loop_body:
     mov                  r10,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.73.loop_body:
     mov                  r11,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.74.loop_body:
     mov                  r12,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.75.loop_body:
     mov                  r13,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.76.loop_body:
     mov                  r14,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.77.loop_body:
     mov                  r15,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.78.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.78.loop_body:
     mov                  rdi,    qword [rbp - 168]
     sal                  rdi,                    3
     mov    qword [rbp - 360],                  rbx
     add    qword [rbp - 360],                  rdi
     mov    qword [rbp - 368],                  rsi
     sal    qword [rbp - 368],                    3
     mov                  rcx,    qword [rbp - 360]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 368]
     mov    qword [rbp - 376],                   r8
     sal    qword [rbp - 376],                    3
     mov                  rax,      qword [rdi - 0]
     mov    qword [rbp - 384],                  rax
     mov                  rax,    qword [rbp - 376]
     add    qword [rbp - 384],                  rax
     mov                  rdi,                   r9
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 384]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 392],                  rax
     add    qword [rbp - 392],                  rdi
     mov                  rdi,                  r10
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 392]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 400],                  rax
     add    qword [rbp - 400],                  rdi
     mov                  rdi,                  r11
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 400]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 408],                  rax
     add    qword [rbp - 408],                  rdi
     mov    qword [rbp - 416],                  r12
     sal    qword [rbp - 416],                    3
     mov                  rcx,    qword [rbp - 408]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 416]
     mov    qword [rbp - 424],                  r13
     sal    qword [rbp - 424],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 424]
     mov    qword [rbp - 432],                  r14
     sal    qword [rbp - 432],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 432]
     mov    qword [rbp - 440],                  r15
     sal    qword [rbp - 440],                    3
     mov                  rax,      qword [rdi - 0]
     mov    qword [rbp - 448],                  rax
     mov                  rax,    qword [rbp - 440]
     add    qword [rbp - 448],                  rax
     mov                  rdi,    qword [rbp - 160]
     mov                  rcx,    qword [rbp - 448]
     add                  rdi,      qword [rcx - 0]
     mov    qword [rbp - 160],                  rdi
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.78.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.79.loop_increment:
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.78.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.80.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r15,                  rdi
      jl testArray.78.loop_body
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.82.loop_increment:
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.83.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl testArray.77.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.85.loop_increment:
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.86.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl testArray.76.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.88.loop_increment:
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.89.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r12,                  rdi
      jl testArray.75.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.91.loop_increment:
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.92.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r11,                  rdi
      jl testArray.74.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.94.loop_increment:
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.95.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r10,                  rdi
      jl testArray.73.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.97.loop_increment:
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.98.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
    push                   r9
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl testArray.72.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.100.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.101.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     cmp                   r8,                  rdi
      jl testArray.71.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.103.loop_increment:
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.104.loop_condition:
     mov                  rdi,                  rbx
    push                  rsi
    call         __array_size
     pop                  rsi
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl testArray.70.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.106.loop_increment:
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.107.loop_condition:
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl testArray.69.loop_body
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.108.loop_exit:
     mov                  rdi,     qword [rbp - 32]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,      __string_const1
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                  rsi
    call             toString
     pop                  rsi
     mov                   r8,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.109.loop_increment:
     add     qword [rbp - 32],                    1
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
     jmp   testArray.112.exit
testArray.110.loop_condition:
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,      qword [rbp - 8]
      jl testArray.28.loop_body
testArray.112.exit:
     pop                  rbx
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     add                  rsp,                  448
     pop                  rbp
     ret
@GlobalDeclaration:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                    0
@GlobalDeclaration.0.enter:
     mov qword [@counter - 0],                    0
@GlobalDeclaration.1.exit:
     add                  rsp,                    0
     pop                  rbp
     ret
testManyLogic:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
testManyLogic.0.enter:
     mov                  r10,                  rdi
     mov                   r8,                    1
     mov                  rbx,                    0
     mov                   r9,                    0
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.1.loop_body:
     cmp                   r8,                    1
     jne testManyLogic.3.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.6.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.2.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.6.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.3.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.6.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.4.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.6.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.148.logical_exit
testManyLogic.5.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.6.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.7.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.9.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.151.logical_exit
testManyLogic.8.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.9.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.10.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.12.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.154.logical_exit
testManyLogic.11.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.12.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.13.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.15.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.157.logical_exit
testManyLogic.14.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.15.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.16.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.18.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.160.logical_exit
testManyLogic.17.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.18.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.19.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.21.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.163.logical_exit
testManyLogic.20.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.21.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.22.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.24.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.166.logical_exit
testManyLogic.23.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.24.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.25.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.27.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.169.logical_exit
testManyLogic.26.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.27.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.28.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.30.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.172.logical_exit
testManyLogic.29.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.30.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.31.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.33.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.175.logical_exit
testManyLogic.32.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.33.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.34.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.36.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.178.logical_exit
testManyLogic.35.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.36.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.37.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.39.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.181.logical_exit
testManyLogic.38.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.39.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.40.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.42.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.184.logical_exit
testManyLogic.41.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     jmp testManyLogic.137.logical_false
testManyLogic.42.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     jmp testManyLogic.137.logical_false
testManyLogic.43.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.45.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.139.logical_exit
testManyLogic.44.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     jmp testManyLogic.140.logical_false
testManyLogic.45.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     jmp testManyLogic.140.logical_false
testManyLogic.46.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.48.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.142.logical_exit
testManyLogic.47.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     jmp testManyLogic.143.logical_false
testManyLogic.48.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     jmp testManyLogic.143.logical_false
testManyLogic.49.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.51.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.145.logical_exit
testManyLogic.50.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.51.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.52.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.54.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.148.logical_exit
testManyLogic.53.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.54.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.55.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.57.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.151.logical_exit
testManyLogic.56.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.57.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.58.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.60.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.154.logical_exit
testManyLogic.59.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.60.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.61.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.63.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.157.logical_exit
testManyLogic.62.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.63.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.64.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.66.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.160.logical_exit
testManyLogic.65.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.66.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.67.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.69.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.163.logical_exit
testManyLogic.68.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.69.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.70.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.72.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.166.logical_exit
testManyLogic.71.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.72.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.73.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.75.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.169.logical_exit
testManyLogic.74.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.75.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.76.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.78.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.172.logical_exit
testManyLogic.77.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.78.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.79.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.81.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.175.logical_exit
testManyLogic.80.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.81.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.82.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.84.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.178.logical_exit
testManyLogic.83.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.84.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.85.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.87.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.181.logical_exit
testManyLogic.86.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.87.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.88.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.90.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.184.logical_exit
testManyLogic.89.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.90.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.91.logical_exit:
     cmp                  rdi,                    1
     jne testManyLogic.93.logical_false
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.92.logical_true:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.93.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.94.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.95.if_true
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.95.if_true:
     mov                  rdi,      __string_const2
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.96.if_false:
     mov                  rdi,      __string_const3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.97.if_exit:
     cmp                  rbx,                    1
      je testManyLogic.99.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.98.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.99.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     jmp testManyLogic.146.logical_false
testManyLogic.100.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.102.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.148.logical_exit
testManyLogic.101.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.102.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     jmp testManyLogic.149.logical_false
testManyLogic.103.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.105.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.151.logical_exit
testManyLogic.104.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.105.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     jmp testManyLogic.152.logical_false
testManyLogic.106.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.108.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.154.logical_exit
testManyLogic.107.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.108.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     jmp testManyLogic.155.logical_false
testManyLogic.109.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.111.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.157.logical_exit
testManyLogic.110.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.111.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     jmp testManyLogic.158.logical_false
testManyLogic.112.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.114.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.160.logical_exit
testManyLogic.113.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.114.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     jmp testManyLogic.161.logical_false
testManyLogic.115.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.117.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.163.logical_exit
testManyLogic.116.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.117.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     jmp testManyLogic.164.logical_false
testManyLogic.118.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.120.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.166.logical_exit
testManyLogic.119.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.120.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     jmp testManyLogic.167.logical_false
testManyLogic.121.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.123.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.169.logical_exit
testManyLogic.122.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.123.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     jmp testManyLogic.170.logical_false
testManyLogic.124.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.126.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.172.logical_exit
testManyLogic.125.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.126.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     jmp testManyLogic.173.logical_false
testManyLogic.127.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.129.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.175.logical_exit
testManyLogic.128.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.129.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     jmp testManyLogic.176.logical_false
testManyLogic.130.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.132.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.178.logical_exit
testManyLogic.131.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.132.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     jmp testManyLogic.179.logical_false
testManyLogic.133.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.135.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.181.logical_exit
testManyLogic.134.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.135.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     jmp testManyLogic.182.logical_false
testManyLogic.136.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.138.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     jmp testManyLogic.184.logical_exit
testManyLogic.137.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.138.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.139.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.141.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.140.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.141.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.142.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.144.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.143.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.144.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.145.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.147.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.146.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.147.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.148.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.150.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.149.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.150.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.151.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.153.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.152.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.153.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.154.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.156.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.155.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.156.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.157.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.159.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.158.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.159.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.160.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.162.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.161.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.162.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.163.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.165.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.164.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.165.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.166.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.168.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.167.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.168.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.169.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.171.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.170.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.171.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.172.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.174.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.173.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.174.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.175.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.177.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.176.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.177.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.178.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.180.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.179.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.180.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.181.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.183.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.182.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.183.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.184.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.186.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.185.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.186.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.187.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.189.logical_true
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.188.logical_false:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.189.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.190.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.191.if_true
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.191.if_true:
     mov                  rdi,      __string_const4
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.192.if_false:
     mov                  rdi,      __string_const5
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.193.if_exit:
     mov                  rdi,                   r8
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne testManyLogic.194.if_true
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.194.if_true:
     mov                  rdi,      __string_const6
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.195.if_false:
     mov                  rdi,      __string_const7
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.197.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.198.loop_condition:
     cmp                   r9,                  r10
      jl testManyLogic.1.loop_body
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.199.loop_exit:
     cmp                   r8,                    1
      je testManyLogic.201.logical_true
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.213.enter:
     mov                  rdi,     __string_const13
    push                  rsi
    call              println
     pop                  rsi
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.214.exit:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.201.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.202.logical_exit:
     cmp                  rdi,                    1
      je testManyLogic.203.if_true
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.203.if_true:
     mov                  rdi,      __string_const8
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.204.if_false:
     mov                  rdi,      __string_const9
    push                  rsi
    call              println
     pop                  rsi
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.205.if_exit:
     cmp                  rbx,                    1
     jne testManyLogic.207.logical_false
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.215.enter:
     mov                  rdi,     __string_const14
    push                  rsi
    call              println
     pop                  rsi
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.216.exit:
     mov                  rbx,                  rsi
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.207.logical_false:
     mov                  rbx,                    0
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.208.logical_exit:
     cmp                  rbx,                    1
      je testManyLogic.209.if_true
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.209.if_true:
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testManyLogic.212.exit
testManyLogic.210.if_false:
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
testManyLogic.212.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
SideEffectTester.null:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
SideEffectTester.null.0.enter:
     mov                  rbx,                  rdi
     mov      qword [rbx - 0],                    0
SideEffectTester.null.1.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
main:
    push                  rbp
     mov                  rbp,                  rsp
    call   @GlobalDeclaration
    push                  r12
    push                  r14
    push                  r13
    push                  r15
    push                  rbx
     sub                  rsp,                  408
main.6.enter:
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call ConstructorTester.null
     mov                  rbx,                    5
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov                   r8,                  rsi
     sub                  rbx,                    8
     add                   r8,                  rbx
     cmp                  rsi,                   r8
      jl main.7.allocate_body
     mov                  rbx,                    4
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    4
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  r10,                  rsi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.7.allocate_body:
    push                   r8
    push                  rsi
     mov                  rdi,                    8
    call               malloc
     pop                  rsi
     pop                   r8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    push                   r8
    push                  rsi
    call ConstructorTester.null
     pop                  rsi
     pop                   r8
     mov      qword [rsi - 0],                  rbx
     add                  rsi,                    8
     cmp                  rsi,                   r8
      jl main.7.allocate_body
     mov                  rbx,                    4
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    4
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  r10,                  rsi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.8.allocate_condition:
     cmp                  rsi,                   r8
      jl main.7.allocate_body
     mov                  rbx,                    4
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    4
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  r10,                  rsi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.9.allocate_exit:
     mov                  rbx,                    4
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    4
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  r10,                  rsi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.10.allocate_body:
     mov                  rbx,                    4
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                   r8
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    4
     add                  rsi,                    8
     mov                   r9,                  rsi
     mov                  r11,                  rsi
     sub                  rbx,                    8
     add                  r11,                  rbx
     cmp                   r9,                  r11
      jl main.11.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.11.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call ConstructorTester.null
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov       qword [r9 - 0],                  rbx
     add                   r9,                    8
     cmp                   r9,                  r11
      jl main.11.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.12.allocate_condition:
     cmp                   r9,                  r11
      jl main.11.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.13.allocate_exit:
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.14.allocate_condition:
     cmp                   r8,                  r10
      jl main.10.allocate_body
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.15.allocate_exit:
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r10,                  rsi
     mov                  r12,                  rsi
     sub                  rbx,                    8
     add                  r12,                  rbx
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.16.allocate_body:
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                   r8
     mov                  rdi,                  rbx
    call               malloc
     pop                   r8
     pop                  r10
     mov                   r8,                  rax
     mov       qword [r8 - 0],                    3
     add                   r8,                    8
     mov                   r9,                   r8
     mov                  r14,                   r8
     sub                  rbx,                    8
     add                  r14,                  rbx
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.17.allocate_body:
     mov                  rbx,                    3
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    3
     add                  rsi,                    8
     mov                  r11,                  rsi
     mov                  r13,                  rsi
     sub                  rbx,                    8
     add                  r13,                  rbx
     cmp                  r11,                  r13
      jl main.18.allocate_body
     mov       qword [r9 - 0],                  rsi
     add                   r9,                    8
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.18.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call ConstructorTester.null
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r11 - 0],                  rbx
     add                  r11,                    8
     cmp                  r11,                  r13
      jl main.18.allocate_body
     mov       qword [r9 - 0],                  rsi
     add                   r9,                    8
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.19.allocate_condition:
     cmp                  r11,                  r13
      jl main.18.allocate_body
     mov       qword [r9 - 0],                  rsi
     add                   r9,                    8
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.20.allocate_exit:
     mov       qword [r9 - 0],                  rsi
     add                   r9,                    8
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.21.allocate_condition:
     cmp                   r9,                  r14
      jl main.17.allocate_body
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.22.allocate_exit:
     mov      qword [r10 - 0],                   r8
     add                  r10,                    8
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.23.allocate_condition:
     cmp                  r10,                  r12
      jl main.16.allocate_body
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.24.allocate_exit:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov                   r8,                  rdi
     mov                  r10,                  rdi
     sub                  rbx,                    8
     add                  r10,                  rbx
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.25.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  rdi
    push                   r8
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                   r9,                  rsi
     mov                  r11,                  rsi
     sub                  rbx,                    8
     add                  r11,                  rbx
     cmp                   r9,                  r11
      jl main.26.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.26.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov       qword [r9 - 0],                  rbx
     add                   r9,                    8
     cmp                   r9,                  r11
      jl main.26.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.27.allocate_condition:
     cmp                   r9,                  r11
      jl main.26.allocate_body
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.28.allocate_exit:
     mov       qword [r8 - 0],                  rsi
     add                   r8,                    8
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.29.allocate_condition:
     cmp                   r8,                  r10
      jl main.25.allocate_body
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.30.allocate_exit:
     mov                  r11,                  rdi
     mov                   r9,                    0
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.31.loop_body:
     mov                   r8,                    0
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.32.loop_body:
     mov                  r10,                    0
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.33.loop_body:
     mov                  rbx,                   r9
     sal                  rbx,                    3
     mov                  rsi,                  r11
     add                  rsi,                  rbx
     mov                  rbx,                   r8
     sal                  rbx,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rbx
     mov                  rbx,                  r10
     sal                  rbx,                    3
     mov                  r14,      qword [rsi - 0]
     add                  r14,                  rbx
     mov                  rbx,                    1
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    1
     add                  rsi,                    8
     mov                  r12,                  rsi
     mov                  r13,                  rsi
     sub                  rbx,                    8
     add                  r13,                  rbx
     cmp                  r12,                  r13
      jl main.34.allocate_body
     mov      qword [r14 - 0],                  rsi
     add                  r10,                    1
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.34.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call ConstructorTester.null
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r12 - 0],                  rbx
     add                  r12,                    8
     cmp                  r12,                  r13
      jl main.34.allocate_body
     mov      qword [r14 - 0],                  rsi
     add                  r10,                    1
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.35.allocate_condition:
     cmp                  r12,                  r13
      jl main.34.allocate_body
     mov      qword [r14 - 0],                  rsi
     add                  r10,                    1
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.36.allocate_exit:
     mov      qword [r14 - 0],                  rsi
     add                  r10,                    1
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.37.loop_increment:
     add                  r10,                    1
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.38.loop_condition:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     cmp                  r10,                  rbx
      jl    main.33.loop_body
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.40.loop_increment:
     add                   r8,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.41.loop_condition:
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rbx,                  r11
     add                  rbx,                  rsi
     mov                  rdi,      qword [rbx - 0]
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r8,                  rbx
      jl    main.32.loop_body
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.43.loop_increment:
     add                   r9,                    1
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.44.loop_condition:
     mov                  rdi,                  r11
    push                  r11
    push                   r9
    call         __array_size
     pop                   r9
     pop                  r11
     mov                  rbx,                  rax
     cmp                   r9,                  rbx
      jl    main.31.loop_body
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.47.enter:
     mov                  rdi,                    8
    call               malloc
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call SideEffectTester.null
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                  rbx
    call SideEffectTester.getSelf
     mov                  rsi,                  rax
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,      qword [rbx - 0]
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.48.exit:
     mov                   r9,                   10
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.49.enter:
     mov                  rbx,                    1
     mov                  rsi,                    0
     mov                   r8,                    0
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.50.loop_body:
     cmp                  rbx,                    1
     jne main.52.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.55.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.51.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.55.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.52.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.55.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.53.logical_exit:
     cmp                  rdi,                    1
     jne main.55.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     jmp main.197.logical_exit
main.54.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.55.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.56.logical_exit:
     cmp                  rdi,                    1
     jne main.58.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     jmp main.200.logical_exit
main.57.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.58.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.59.logical_exit:
     cmp                  rdi,                    1
     jne main.61.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     jmp main.203.logical_exit
main.60.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.61.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.62.logical_exit:
     cmp                  rdi,                    1
     jne main.64.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     jmp main.206.logical_exit
main.63.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.64.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.65.logical_exit:
     cmp                  rdi,                    1
     jne main.67.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     jmp main.209.logical_exit
main.66.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.67.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.68.logical_exit:
     cmp                  rdi,                    1
     jne main.70.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     jmp main.212.logical_exit
main.69.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.70.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.71.logical_exit:
     cmp                  rdi,                    1
     jne main.73.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.72.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.73.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.74.logical_exit:
     cmp                  rdi,                    1
     jne main.76.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.75.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.76.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.77.logical_exit:
     cmp                  rdi,                    1
     jne main.79.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     jmp main.221.logical_exit
main.78.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.79.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.80.logical_exit:
     cmp                  rdi,                    1
     jne main.82.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     jmp main.224.logical_exit
main.81.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.82.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.83.logical_exit:
     cmp                  rdi,                    1
     jne main.85.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     jmp main.227.logical_exit
main.84.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.85.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.86.logical_exit:
     cmp                  rdi,                    1
     jne main.88.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     jmp main.230.logical_exit
main.87.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.88.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.89.logical_exit:
     cmp                  rdi,                    1
     jne main.91.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     jmp main.233.logical_exit
main.90.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.91.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.92.logical_exit:
     cmp                  rdi,                    1
     jne main.94.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     jmp main.236.logical_exit
main.93.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.94.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.95.logical_exit:
     cmp                  rdi,                    1
     jne main.97.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.96.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.97.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.98.logical_exit:
     cmp                  rdi,                    1
     jne main.100.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.99.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.100.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.101.logical_exit:
     cmp                  rdi,                    1
     jne main.103.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     jmp main.197.logical_exit
main.102.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.103.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.104.logical_exit:
     cmp                  rdi,                    1
     jne main.106.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     jmp main.200.logical_exit
main.105.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.106.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.107.logical_exit:
     cmp                  rdi,                    1
     jne main.109.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     jmp main.203.logical_exit
main.108.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.109.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.110.logical_exit:
     cmp                  rdi,                    1
     jne main.112.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     jmp main.206.logical_exit
main.111.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.112.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.113.logical_exit:
     cmp                  rdi,                    1
     jne main.115.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     jmp main.209.logical_exit
main.114.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.115.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.116.logical_exit:
     cmp                  rdi,                    1
     jne main.118.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     jmp main.212.logical_exit
main.117.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.118.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.119.logical_exit:
     cmp                  rdi,                    1
     jne main.121.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.120.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.121.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.122.logical_exit:
     cmp                  rdi,                    1
     jne main.124.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.123.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.124.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.125.logical_exit:
     cmp                  rdi,                    1
     jne main.127.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     jmp main.221.logical_exit
main.126.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.127.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.128.logical_exit:
     cmp                  rdi,                    1
     jne main.130.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     jmp main.224.logical_exit
main.129.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.130.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.131.logical_exit:
     cmp                  rdi,                    1
     jne main.133.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     jmp main.227.logical_exit
main.132.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.133.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.134.logical_exit:
     cmp                  rdi,                    1
     jne main.136.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     jmp main.230.logical_exit
main.135.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.136.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.137.logical_exit:
     cmp                  rdi,                    1
     jne main.139.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     jmp main.233.logical_exit
main.138.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.139.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.140.logical_exit:
     cmp                  rdi,                    1
     jne main.142.logical_false
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     jmp main.236.logical_exit
main.141.logical_true:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.142.logical_false:
     mov                  rdi,                    0
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.143.logical_exit:
     cmp                  rdi,                    1
      je     main.144.if_true
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.144.if_true:
     mov                  rdi,     __string_const15
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.145.if_false:
     mov                  rdi,     __string_const16
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.146.if_exit:
     cmp                  rsi,                    1
      je main.148.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.147.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.148.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     jmp main.195.logical_false
main.149.logical_exit:
     cmp                  rdi,                    1
      je main.151.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     jmp main.197.logical_exit
main.150.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.151.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     jmp main.198.logical_false
main.152.logical_exit:
     cmp                  rdi,                    1
      je main.154.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     jmp main.200.logical_exit
main.153.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.154.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     jmp main.201.logical_false
main.155.logical_exit:
     cmp                  rdi,                    1
      je main.157.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     jmp main.203.logical_exit
main.156.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.157.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     jmp main.204.logical_false
main.158.logical_exit:
     cmp                  rdi,                    1
      je main.160.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     jmp main.206.logical_exit
main.159.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.160.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     jmp main.207.logical_false
main.161.logical_exit:
     cmp                  rdi,                    1
      je main.163.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     jmp main.209.logical_exit
main.162.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.163.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     jmp main.210.logical_false
main.164.logical_exit:
     cmp                  rdi,                    1
      je main.166.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     jmp main.212.logical_exit
main.165.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.166.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     jmp main.213.logical_false
main.167.logical_exit:
     cmp                  rdi,                    1
      je main.169.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.168.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.169.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.170.logical_exit:
     cmp                  rdi,                    1
      je main.172.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.171.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.172.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     jmp main.219.logical_false
main.173.logical_exit:
     cmp                  rdi,                    1
      je main.175.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     jmp main.221.logical_exit
main.174.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.175.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     jmp main.222.logical_false
main.176.logical_exit:
     cmp                  rdi,                    1
      je main.178.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     jmp main.224.logical_exit
main.177.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.178.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     jmp main.225.logical_false
main.179.logical_exit:
     cmp                  rdi,                    1
      je main.181.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     jmp main.227.logical_exit
main.180.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.181.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     jmp main.228.logical_false
main.182.logical_exit:
     cmp                  rdi,                    1
      je main.184.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     jmp main.230.logical_exit
main.183.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.184.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     jmp main.231.logical_false
main.185.logical_exit:
     cmp                  rdi,                    1
      je main.187.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     jmp main.233.logical_exit
main.186.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.187.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     jmp main.234.logical_false
main.188.logical_exit:
     cmp                  rdi,                    1
      je main.190.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     jmp main.236.logical_exit
main.189.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.190.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     jmp main.237.logical_false
main.191.logical_exit:
     cmp                  rdi,                    1
      je main.193.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.192.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.193.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.194.logical_exit:
     cmp                  rdi,                    1
      je main.196.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.195.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.196.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.197.logical_exit:
     cmp                  rdi,                    1
      je main.199.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.198.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.199.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.200.logical_exit:
     cmp                  rdi,                    1
      je main.202.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.201.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.202.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.203.logical_exit:
     cmp                  rdi,                    1
      je main.205.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.204.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.205.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.206.logical_exit:
     cmp                  rdi,                    1
      je main.208.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.207.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.208.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.209.logical_exit:
     cmp                  rdi,                    1
      je main.211.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.210.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.211.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.212.logical_exit:
     cmp                  rdi,                    1
      je main.214.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.213.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.214.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.215.logical_exit:
     cmp                  rdi,                    1
      je main.217.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     jmp main.239.logical_exit
main.216.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.217.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     jmp    main.241.if_false
main.218.logical_exit:
     cmp                  rdi,                    1
      je main.220.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     jmp     main.242.if_exit
main.219.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.220.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.221.logical_exit:
     cmp                  rdi,                    1
      je main.223.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.222.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.223.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.224.logical_exit:
     cmp                  rdi,                    1
      je main.226.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.225.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.226.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.227.logical_exit:
     cmp                  rdi,                    1
      je main.229.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.228.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.229.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.230.logical_exit:
     cmp                  rdi,                    1
      je main.232.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.231.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.232.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.233.logical_exit:
     cmp                  rdi,                    1
      je main.235.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.234.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.235.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.236.logical_exit:
     cmp                  rdi,                    1
      je main.238.logical_true
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.237.logical_false:
     mov                  rdi,                  rsi
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.238.logical_true:
     mov                  rdi,                    1
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.239.logical_exit:
     cmp                  rdi,                    1
      je     main.240.if_true
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.240.if_true:
     mov                  rdi,     __string_const17
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.241.if_false:
     mov                  rdi,     __string_const18
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.242.if_exit:
     mov                  rdi,                  rbx
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     mov                  rdi,                    0
   setne                  dil
     cmp                  rdi,                    1
     jne     main.243.if_true
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.243.if_true:
     mov                  rdi,     __string_const19
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.244.if_false:
     mov                  rdi,     __string_const20
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.246.loop_increment:
     add                   r8,                    1
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.247.loop_condition:
     cmp                   r8,                   r9
      jl    main.50.loop_body
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.248.loop_exit:
     cmp                  rbx,                    1
      je main.250.logical_true
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.249.logical_false:
    push                  rsi
     sub                  rsp,                    8
    call                error
     add                  rsp,                    8
     pop                  rsi
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.250.logical_true:
     mov                  rbx,                    1
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.251.logical_exit:
     cmp                  rbx,                    1
      je     main.252.if_true
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.252.if_true:
     mov                  rdi,     __string_const21
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.253.if_false:
     mov                  rdi,     __string_const22
    push                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                  rsi
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.254.if_exit:
     cmp                  rsi,                    1
     jne main.256.logical_false
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.255.logical_true:
    call                error
     mov                  rbx,                  rax
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.256.logical_false:
     mov                  rbx,                    0
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.257.logical_exit:
     cmp                  rbx,                    1
      je     main.258.if_true
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.258.if_true:
     mov                  rdi,     __string_const23
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.259.if_false:
     mov                  rdi,     __string_const24
    call              println
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.261.exit:
     mov      qword [rbp - 8],                   10
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.262.enter:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    2
     add                  rsi,                    8
     mov                  r15,                  rsi
     mov     qword [rbp - 16],                  rsi
     sub                  rbx,                    8
     add     qword [rbp - 16],                  rbx
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.263.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  r10
     mov                  r10,                  rax
     mov      qword [r10 - 0],                    2
     add                  r10,                    8
     mov     qword [rbp - 32],                  r10
     mov     qword [rbp - 40],                  r10
     sub                  rbx,                    8
     add     qword [rbp - 40],                  rbx
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.264.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  r11
     pop                  r10
     mov                  r11,                  rax
     mov      qword [r11 - 0],                    2
     add                  r11,                    8
     mov     qword [rbp - 48],                  r11
     mov     qword [rbp - 56],                  r11
     sub                  rbx,                    8
     add     qword [rbp - 56],                  rbx
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.265.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                    2
     add                  rdi,                    8
     mov     qword [rbp - 64],                  rdi
     mov     qword [rbp - 72],                  rdi
     sub                  rbx,                    8
     add     qword [rbp - 72],                  rbx
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.266.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov      qword [r14 - 0],                    2
     add                  r14,                    8
     mov     qword [rbp - 80],                  r14
     mov     qword [rbp - 88],                  r14
     sub                  rbx,                    8
     add     qword [rbp - 88],                  rbx
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.267.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  r13,                  rax
     mov      qword [r13 - 0],                    2
     add                  r13,                    8
     mov     qword [rbp - 96],                  r13
     mov    qword [rbp - 104],                  r13
     sub                  rbx,                    8
     add    qword [rbp - 104],                  rbx
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.268.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  r12,                  rax
     mov      qword [r12 - 0],                    2
     add                  r12,                    8
     mov    qword [rbp - 112],                  r12
     mov    qword [rbp - 120],                  r12
     sub                  rbx,                    8
     add    qword [rbp - 120],                  rbx
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.269.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                   r8,                  rax
     mov       qword [r8 - 0],                    2
     add                   r8,                    8
     mov    qword [rbp - 128],                   r8
     mov    qword [rbp - 136],                   r8
     sub                  rbx,                    8
     add    qword [rbp - 136],                  rbx
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.270.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                   r9,                  rax
     mov       qword [r9 - 0],                    2
     add                   r9,                    8
     mov    qword [rbp - 144],                   r9
     mov    qword [rbp - 152],                   r9
     sub                  rbx,                    8
     add    qword [rbp - 152],                  rbx
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl main.271.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                   r9
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.271.allocate_body:
     mov                  rbx,                    2
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rcx,    qword [rbp - 144]
     mov      qword [rcx - 0],                  rbx
     add    qword [rbp - 144],                    8
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl main.271.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                   r9
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.272.allocate_condition:
     mov                  rax,    qword [rbp - 144]
     cmp                  rax,    qword [rbp - 152]
      jl main.271.allocate_body
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                   r9
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.273.allocate_exit:
     mov                  rcx,    qword [rbp - 128]
     mov      qword [rcx - 0],                   r9
     add    qword [rbp - 128],                    8
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.274.allocate_condition:
     mov                  rax,    qword [rbp - 128]
     cmp                  rax,    qword [rbp - 136]
      jl main.270.allocate_body
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.275.allocate_exit:
     mov                  rcx,    qword [rbp - 112]
     mov      qword [rcx - 0],                   r8
     add    qword [rbp - 112],                    8
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.276.allocate_condition:
     mov                  rax,    qword [rbp - 112]
     cmp                  rax,    qword [rbp - 120]
      jl main.269.allocate_body
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.277.allocate_exit:
     mov                  rcx,     qword [rbp - 96]
     mov      qword [rcx - 0],                  r12
     add     qword [rbp - 96],                    8
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.278.allocate_condition:
     mov                  rax,     qword [rbp - 96]
     cmp                  rax,    qword [rbp - 104]
      jl main.268.allocate_body
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.279.allocate_exit:
     mov                  rcx,     qword [rbp - 80]
     mov      qword [rcx - 0],                  r13
     add     qword [rbp - 80],                    8
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.280.allocate_condition:
     mov                  rax,     qword [rbp - 80]
     cmp                  rax,     qword [rbp - 88]
      jl main.267.allocate_body
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.281.allocate_exit:
     mov                  rcx,     qword [rbp - 64]
     mov      qword [rcx - 0],                  r14
     add     qword [rbp - 64],                    8
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.282.allocate_condition:
     mov                  rax,     qword [rbp - 64]
     cmp                  rax,     qword [rbp - 72]
      jl main.266.allocate_body
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.283.allocate_exit:
     mov                  rcx,     qword [rbp - 48]
     mov      qword [rcx - 0],                  rdi
     add     qword [rbp - 48],                    8
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.284.allocate_condition:
     mov                  rax,     qword [rbp - 48]
     cmp                  rax,     qword [rbp - 56]
      jl main.265.allocate_body
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.285.allocate_exit:
     mov                  rcx,     qword [rbp - 32]
     mov      qword [rcx - 0],                  r11
     add     qword [rbp - 32],                    8
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.286.allocate_condition:
     mov                  rax,     qword [rbp - 32]
     cmp                  rax,     qword [rbp - 40]
      jl main.264.allocate_body
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.287.allocate_exit:
     mov      qword [r15 - 0],                  r10
     add                  r15,                    8
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.288.allocate_condition:
     cmp                  r15,     qword [rbp - 16]
      jl main.263.allocate_body
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.289.allocate_exit:
     mov                  rbx,                  rsi
     mov     qword [rbp - 24],                    0
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.290.loop_body:
     mov    qword [rbp - 160],                    0
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.291.loop_body:
     mov                  r15,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.292.loop_body:
     mov                  r12,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.293.loop_body:
     mov                  r11,                    0
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.294.loop_body:
     mov                  r10,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.295.loop_body:
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.296.loop_body:
     mov                  rsi,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.297.loop_body:
     mov                  r13,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.298.loop_body:
     mov                   r9,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.299.loop_body:
     mov                  r14,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.300.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.300.loop_body:
     mov                  rdi,                   r8
     sal                  rdi,                    3
     mov    qword [rbp - 176],                  rbx
     add    qword [rbp - 176],                  rdi
     mov                  rdi,                  r15
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 176]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 184],                  rax
     add    qword [rbp - 184],                  rdi
     mov                  rdi,                  r12
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 184]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 192],                  rax
     add    qword [rbp - 192],                  rdi
     mov                  rdi,                  r11
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 192]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 200],                  rax
     add    qword [rbp - 200],                  rdi
     mov                  rdi,                  r10
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 200]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 208],                  rax
     add    qword [rbp - 208],                  rdi
     mov                  rdi,    qword [rbp - 168]
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 208]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 216],                  rax
     add    qword [rbp - 216],                  rdi
     mov    qword [rbp - 224],                  rsi
     sal    qword [rbp - 224],                    3
     mov                  rcx,    qword [rbp - 216]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 224]
     mov    qword [rbp - 232],                  r13
     sal    qword [rbp - 232],                    3
     mov                  rax,      qword [rdi - 0]
     mov    qword [rbp - 240],                  rax
     mov                  rax,    qword [rbp - 232]
     add    qword [rbp - 240],                  rax
     mov                  rdi,                   r9
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 240]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 248],                  rax
     add    qword [rbp - 248],                  rdi
     mov                  rdi,                  r14
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 248]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 256],                  rax
     add    qword [rbp - 256],                  rdi
     mov    qword [rbp - 264],                   r8
     add    qword [rbp - 264],                  r15
     mov    qword [rbp - 272],                  r12
     mov                  rax,    qword [rbp - 272]
    imul                  rax,                  r11
     mov    qword [rbp - 272],                  rax
     mov                  rdi,                  r10
     add                  rdi,                   93
     mov                  rax,    qword [rbp - 272]
     mov    qword [rbp - 280],                  rax
     mov                  rax,    qword [rbp - 280]
     mov                  rcx,                  rdi
     cqo
    idiv                  rcx
     mov    qword [rbp - 280],                  rax
     mov                  rdi,    qword [rbp - 168]
     add                  rdi,                   93
     mov                  rax,    qword [rbp - 280]
     mov    qword [rbp - 288],                  rax
     mov                  rax,    qword [rbp - 288]
     mov                  rcx,                  rdi
     cqo
    idiv                  rcx
     mov    qword [rbp - 288],                  rdx
     mov                  rdi,    qword [rbp - 264]
     sub                  rdi,    qword [rbp - 288]
     mov    qword [rbp - 296],                  rdi
     and    qword [rbp - 296],                  rsi
     mov    qword [rbp - 304],                   r9
     add    qword [rbp - 304],                  r14
     mov                  rdi,                  r13
     xor                  rdi,    qword [rbp - 304]
     mov                  rax,    qword [rbp - 296]
     mov    qword [rbp - 312],                  rax
      or    qword [rbp - 312],                  rdi
     mov                  rdi,    qword [rbp - 312]
     not                  rdi
     mov                  rcx,    qword [rbp - 256]
     mov      qword [rcx - 0],                  rdi
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.300.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.301.loop_increment:
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.300.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.302.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.300.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.304.loop_increment:
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.305.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.299.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.307.loop_increment:
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.308.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.298.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.310.loop_increment:
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.311.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.297.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.313.loop_increment:
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.314.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.296.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.316.loop_increment:
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.317.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.295.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.319.loop_increment:
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.320.loop_condition:
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.294.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.322.loop_increment:
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.323.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.293.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.325.loop_increment:
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.326.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.292.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.328.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.329.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.291.loop_body
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.330.loop_exit:
     mov                   r8,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.331.loop_body:
     mov                  r15,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.332.loop_body:
     mov                  r12,                    0
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.333.loop_body:
     mov                  r11,                    0
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.334.loop_body:
     mov                  r10,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.335.loop_body:
     mov    qword [rbp - 168],                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.336.loop_body:
     mov                  rsi,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.337.loop_body:
     mov                  r13,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.338.loop_body:
     mov                   r9,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.339.loop_body:
     mov                  r14,                    0
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.340.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.340.loop_body:
     mov    qword [rbp - 320],                   r8
     sal    qword [rbp - 320],                    3
     mov                  rdi,                  rbx
     add                  rdi,    qword [rbp - 320]
     mov    qword [rbp - 328],                  r15
     sal    qword [rbp - 328],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 328]
     mov    qword [rbp - 336],                  r12
     sal    qword [rbp - 336],                    3
     mov                  rax,      qword [rdi - 0]
     mov    qword [rbp - 344],                  rax
     mov                  rax,    qword [rbp - 336]
     add    qword [rbp - 344],                  rax
     mov                  rdi,                  r11
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 344]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 352],                  rax
     add    qword [rbp - 352],                  rdi
     mov                  rdi,                  r10
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 352]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 360],                  rax
     add    qword [rbp - 360],                  rdi
     mov                  rdi,    qword [rbp - 168]
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 360]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 368],                  rax
     add    qword [rbp - 368],                  rdi
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 368]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 376],                  rax
     add    qword [rbp - 376],                  rdi
     mov                  rdi,                  r13
     sal                  rdi,                    3
     mov                  rcx,    qword [rbp - 376]
     mov                  rax,      qword [rcx - 0]
     mov    qword [rbp - 384],                  rax
     add    qword [rbp - 384],                  rdi
     mov    qword [rbp - 392],                   r9
     sal    qword [rbp - 392],                    3
     mov                  rcx,    qword [rbp - 384]
     mov                  rdi,      qword [rcx - 0]
     add                  rdi,    qword [rbp - 392]
     mov    qword [rbp - 400],                  r14
     sal    qword [rbp - 400],                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,    qword [rbp - 400]
     mov                  rax,    qword [rbp - 160]
     mov    qword [rbp - 408],                  rax
     mov                  rax,      qword [rdi - 0]
     add    qword [rbp - 408],                  rax
     mov                  rax,    qword [rbp - 408]
     mov    qword [rbp - 160],                  rax
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.340.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.341.loop_increment:
     add                  r14,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.340.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.342.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r14,                  rdi
      jl   main.340.loop_body
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.344.loop_increment:
     add                   r9,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.345.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                   r9,                  rdi
      jl   main.339.loop_body
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.347.loop_increment:
     add                  r13,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.348.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  r13,                  rdi
      jl   main.338.loop_body
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.350.loop_increment:
     add                  rsi,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.351.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
    push                  rsi
    call         __array_size
     pop                  rsi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rax
     cmp                  rsi,                  rdi
      jl   main.337.loop_body
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.353.loop_increment:
     add    qword [rbp - 168],                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.354.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp    qword [rbp - 168],                  rsi
      jl   main.336.loop_body
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.356.loop_increment:
     add                  r10,                    1
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.357.loop_condition:
     mov                  rdi,                  rbx
    push                  r10
    push                  r11
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl   main.335.loop_body
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.359.loop_increment:
     add                  r11,                    1
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.360.loop_condition:
     mov                  rdi,                  rbx
    push                  r11
    push                   r8
    call         __array_size
     pop                   r8
     pop                  r11
     mov                  rsi,                  rax
     cmp                  r11,                  rsi
      jl   main.334.loop_body
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.362.loop_increment:
     add                  r12,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.363.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r12,                  rsi
      jl   main.333.loop_body
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.365.loop_increment:
     add                  r15,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.366.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                  r15,                  rsi
      jl   main.332.loop_body
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.368.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.369.loop_condition:
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl   main.331.loop_body
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.370.loop_exit:
     mov                  rdi,     qword [rbp - 24]
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,     __string_const25
    call  __string_connection
     mov                   r8,                  rax
     mov                  rdi,    qword [rbp - 160]
    push                   r8
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.371.loop_increment:
     add     qword [rbp - 24],                    1
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.372.loop_condition:
     mov                  rax,     qword [rbp - 24]
     cmp                  rax,      qword [rbp - 8]
      jl   main.290.loop_body
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.374.exit:
     mov                   r9,                   10
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.375.enter:
    push                   r9
     mov                  rdi,                   32
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     mov                  rsi,                    0
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.376.loop_body:
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                   32
    call               malloc
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                   r8,                  rax
     mov     qword [rdi + 24],                   r8
     mov                  rdi,     qword [rdi + 24]
     add                  rsi,                    1
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.377.loop_increment:
     add                  rsi,                    1
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.378.loop_condition:
     cmp                  rsi,                   r9
      jl   main.376.loop_body
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.379.loop_exit:
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  197
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rsi,     qword [rsi + 24]
     mov      qword [rsi - 0],                  297
     mov                  rsi,     qword [rbx + 24]
     mov                  rsi,     qword [rsi + 24]
     mov                  rdi,     qword [rsi + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rbx,     qword [rbx + 24]
     mov                  rsi,     qword [rbx + 24]
     mov                  rbx,      qword [rdi - 0]
     add                  rbx,      qword [rsi - 0]
     mov                  rdi,                  rbx
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.380.exit:
     mov                  r15,                    0
     mov                  r12,                    0
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.1.loop_body:
     mov                  rdi,               100000
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                   r8,                  rbx
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                   r8
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  rdi
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                   r9,                  rbx
     mov                  r10,                    0
     sal                  r10,                    3
     mov                  rbx,                  rsi
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    1
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  r10,                  rsi
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    2
     mov                  r10,                    0
     sal                  r10,                    3
     mov                  rbx,                   r8
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    2
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  r10,                   r8
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    1
     mov                  rbx,                    0
     sal                  rbx,                    3
     mov                  r10,                   r9
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    0
     mov                  r10,                    1
     sal                  r10,                    3
     mov                  rbx,                   r9
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    0
     mov                  rbx,                    2
     cmp                  rbx,                  rdi
      jl   main.382.loop_body
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.381.enter:
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
    call               malloc
     pop                  rsi
     pop                  rdi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                   r8,                  rbx
     mov                  rbx,                  rdi
     add                  rbx,                    1
     sal                  rbx,                    3
    push                   r8
    push                  rdi
    push                  rsi
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  rdi
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                  rdi
     add                  rbx,                    8
     mov                   r9,                  rbx
     mov                  r10,                    0
     sal                  r10,                    3
     mov                  rbx,                  rsi
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    1
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  r10,                  rsi
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    2
     mov                  r10,                    0
     sal                  r10,                    3
     mov                  rbx,                   r8
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    2
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  r10,                   r8
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    1
     mov                  rbx,                    0
     sal                  rbx,                    3
     mov                  r10,                   r9
     add                  r10,                  rbx
     mov      qword [r10 - 0],                    0
     mov                  r10,                    1
     sal                  r10,                    3
     mov                  rbx,                   r9
     add                  rbx,                  r10
     mov      qword [rbx - 0],                    0
     mov                  rbx,                    2
     cmp                  rbx,                  rdi
      jl   main.382.loop_body
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.382.loop_body:
     mov                  r10,                  rbx
     sal                  r10,                    3
     mov                  r14,                  rsi
     add                  r14,                  r10
     mov                  r10,                  rbx
     sub                  r10,                    1
     sal                  r10,                    3
     mov                  r11,                  rsi
     add                  r11,                  r10
     mov                  r13,      qword [r11 - 0]
    imul                  r13,                    4
     mov                  r10,                  rbx
     sub                  r10,                    2
     mov                  r11,                  r10
     sal                  r11,                    3
     mov                  r10,                  rsi
     add                  r10,                  r11
     mov                  r11,                  r13
     add                  r11,      qword [r10 - 0]
     mov                  r10,                  r11
     add                  r10,                    2
     and                  r10,              1048575
     mov      qword [r14 - 0],                  r10
     mov                  r10,                  rbx
     sal                  r10,                    3
     mov                  r13,                   r8
     add                  r13,                  r10
     mov                  r10,                  rbx
     sub                  r10,                    1
     mov                  r11,                  r10
     sal                  r11,                    3
     mov                  r10,                   r8
     add                  r10,                  r11
     mov                  r10,      qword [r10 - 0]
    imul                  r10,                    8
     mov                  r11,                    3
     add                  r11,                  r10
     mov                  r10,                  rbx
     sub                  r10,                    2
     mov                  r14,                  r10
     sal                  r14,                    3
     mov                  r10,                  rsi
     add                  r10,                  r14
     add                  r11,      qword [r10 - 0]
     mov                  r10,                  r11
     and                  r10,              1048575
     mov      qword [r13 - 0],                  r10
     mov                  r10,                  rbx
     sal                  r10,                    3
     mov                  r13,                   r9
     add                  r13,                  r10
     mov                  r10,                  rbx
     sal                  r10,                    3
     mov                  r11,                  rsi
     add                  r11,                  r10
     mov                  r10,                  rbx
     sal                  r10,                    3
     mov                  r14,                   r8
     add                  r14,                  r10
     mov                  r10,      qword [r14 - 0]
    imul                  r10,                    2
     mov                  r11,      qword [r11 - 0]
     add                  r11,                  r10
     mov                  r10,                  r11
     and                  r10,              1048575
     mov      qword [r13 - 0],                  r10
     add                  rbx,                    1
     cmp                  rbx,                  rdi
      jl   main.382.loop_body
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.383.loop_increment:
     add                  rbx,                    1
     cmp                  rbx,                  rdi
      jl   main.382.loop_body
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.384.loop_condition:
     cmp                  rbx,                  rdi
      jl   main.382.loop_body
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.385.loop_exit:
     mov                  r10,                    0
     mov                  rbx,                    0
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.386.loop_body:
     mov                  r11,                  rbx
     sal                  r11,                    3
     mov                  r10,                  rsi
     add                  r10,                  r11
     mov                  r13,                  rbx
     sal                  r13,                    3
     mov                  r11,                   r8
     add                  r11,                  r13
     mov                  r11,      qword [r11 - 0]
    imul                  r11,                    2
     mov                  r10,      qword [r10 - 0]
     add                  r10,                  r11
     mov                  r13,                  rbx
     sal                  r13,                    3
     mov                  r11,                   r9
     add                  r11,                  r13
     add                  r10,      qword [r11 - 0]
     add                  r10,                    9
     and                  r10,              1048575
     add                  rbx,                    1
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.387.loop_increment:
     add                  rbx,                    1
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.388.loop_condition:
     cmp                  rbx,                  rdi
      jl   main.386.loop_body
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.389.loop_exit:
     mov                  rsi,                  r10
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.390.exit:
     mov                  rbx,                  r15
     add                  rbx,                  rsi
     and                  rbx,              1048575
     mov                  r15,                  rbx
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.2.loop_increment:
     add                  r12,                    1
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.3.loop_condition:
     cmp                  r12,                 1200
      jl     main.1.loop_body
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
     jmp          main.5.exit
main.4.loop_exit:
     mov                  rdi,                  r15
    call             toString
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
    call              println
     mov                  rax,                    0
main.5.exit:
     pop                  rbx
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     add                  rsp,                  408
     pop                  rbp
     ret
testConstructor:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
    push                  r12
    push                  r14
    push                  r13
    push                  r15
     sub                  rsp,                    0
testConstructor.0.enter:
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rsi,                  rbx
     mov                  rbx, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rbx
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,     __string_const26
     mov                  rsi,                  rbx
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    5
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.41.enter:
     mov                  rbx, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rbx
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,     __string_const26
     mov                  rsi,                  rbx
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    5
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.42.exit:
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    5
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.1.allocate_body:
    push                   r8
    push                   r9
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                   r9,                  rax
     mov                  rsi,                   r9
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,     __string_const27
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.43.enter:
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,     __string_const27
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.44.exit:
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.2.allocate_condition:
     cmp                  rbx,                   r8
      jl testConstructor.1.allocate_body
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.3.allocate_exit:
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    4
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.4.allocate_body:
     mov                  rsi,                    4
     add                  rsi,                    1
     sal                  rsi,                    3
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                   r9,                  rax
     mov       qword [r9 - 0],                    4
     add                   r9,                    8
     mov                  r10,                   r9
     mov                  r11,                   r9
     sub                  rsi,                    8
     add                  r11,                  rsi
     cmp                  r10,                  r11
      jl testConstructor.5.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.5.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r12,                  rax
     mov                  rsi,                  r12
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const28
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.5.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.45.enter:
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const28
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.5.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.46.exit:
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.5.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.6.allocate_condition:
     cmp                  r10,                  r11
      jl testConstructor.5.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.7.allocate_exit:
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.8.allocate_condition:
     cmp                  rbx,                   r8
      jl testConstructor.4.allocate_body
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.9.allocate_exit:
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    3
     add                  rbx,                    8
     mov                   r8,                  rbx
     sub                  rsi,                    8
     add                   r8,                  rsi
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.10.allocate_body:
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     mov                   r9,                  rax
     mov       qword [r9 - 0],                    3
     add                   r9,                    8
     mov                  r10,                   r9
     mov                  r11,                   r9
     sub                  rsi,                    8
     add                  r11,                  rsi
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.11.allocate_body:
     mov                  rsi,                    3
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r12,                  rax
     mov      qword [r12 - 0],                    3
     add                  r12,                    8
     mov                  r13,                  r12
     mov                  r14,                  r12
     sub                  rsi,                    8
     add                  r14,                  rsi
     cmp                  r13,                  r14
      jl testConstructor.12.allocate_body
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.12.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r15,                  rax
     mov                  rsi,                  r15
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const29
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.12.allocate_body
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.47.enter:
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const29
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.12.allocate_body
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.48.exit:
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.12.allocate_body
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.13.allocate_condition:
     cmp                  r13,                  r14
      jl testConstructor.12.allocate_body
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.14.allocate_exit:
     mov      qword [r10 - 0],                  r12
     add                  r10,                    8
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.15.allocate_condition:
     cmp                  r10,                  r11
      jl testConstructor.11.allocate_body
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.16.allocate_exit:
     mov      qword [rbx - 0],                   r9
     add                  rbx,                    8
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.17.allocate_condition:
     cmp                  rbx,                   r8
      jl testConstructor.10.allocate_body
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.18.allocate_exit:
     mov                   r8,                    2
     add                   r8,                    1
     sal                   r8,                    3
    push                   r8
     mov                  rdi,                   r8
    call               malloc
     pop                   r8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    2
     add                  rbx,                    8
     mov                  rsi,                  rbx
     mov                  rdi,                  rbx
     sub                   r8,                    8
     add                  rdi,                   r8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.19.allocate_body:
     mov                  r11,                    2
     add                  r11,                    1
     sal                  r11,                    3
    push                  r11
    push                   r8
    push                  rdi
    push                  rsi
     mov                  rdi,                  r11
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                  rdi
     pop                   r8
     pop                  r11
     mov                   r8,                  rax
     mov       qword [r8 - 0],                    2
     add                   r8,                    8
     mov                   r9,                   r8
     mov                  r10,                   r8
     sub                  r11,                    8
     add                  r10,                  r11
     cmp                   r9,                  r10
      jl testConstructor.20.allocate_body
     mov      qword [rsi - 0],                   r8
     add                  rsi,                    8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.20.allocate_body:
     mov                  r11,                    2
     add                  r11,                    1
     sal                  r11,                    3
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     mov                  rdi,                  r11
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r11,                  rax
     mov      qword [r11 - 0],                    2
     add                  r11,                    8
     mov       qword [r9 - 0],                  r11
     add                   r9,                    8
     cmp                   r9,                  r10
      jl testConstructor.20.allocate_body
     mov      qword [rsi - 0],                   r8
     add                  rsi,                    8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.21.allocate_condition:
     cmp                   r9,                  r10
      jl testConstructor.20.allocate_body
     mov      qword [rsi - 0],                   r8
     add                  rsi,                    8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.22.allocate_exit:
     mov      qword [rsi - 0],                   r8
     add                  rsi,                    8
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.23.allocate_condition:
     cmp                  rsi,                  rdi
      jl testConstructor.19.allocate_body
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.24.allocate_exit:
     mov                   r8,                  rbx
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.25.loop_body:
     mov                   r9,                    0
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.26.loop_body:
     mov                  r10,                    0
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.27.loop_body:
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov                  rsi,                   r8
     add                  rsi,                  rdi
     mov                  r11,                   r9
     sal                  r11,                    3
     mov                  rdi,      qword [rsi - 0]
     add                  rdi,                  r11
     mov                  rsi,                  r10
     sal                  rsi,                    3
     mov                  r11,      qword [rdi - 0]
     add                  r11,                  rsi
     mov                  rsi,                    1
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r12,                  rax
     mov      qword [r12 - 0],                    1
     add                  r12,                    8
     mov                  r13,                  r12
     mov                  r14,                  r12
     sub                  rsi,                    8
     add                  r14,                  rsi
     cmp                  r13,                  r14
      jl testConstructor.28.allocate_body
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.28.allocate_body:
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r15,                  rax
     mov                  rsi,                  r15
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const30
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.28.allocate_body
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.49.enter:
     mov                  rdi, qword [@counter - 0]
     add qword [@counter - 0],                    1
     mov      qword [rsi - 0],                  rdi
     mov                  rdi,      qword [rsi - 0]
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,     __string_const30
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    push                  r10
    push                  r11
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.28.allocate_body
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.50.exit:
     mov      qword [r13 - 0],                  r15
     add                  r13,                    8
     cmp                  r13,                  r14
      jl testConstructor.28.allocate_body
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.29.allocate_condition:
     cmp                  r13,                  r14
      jl testConstructor.28.allocate_body
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.30.allocate_exit:
     mov      qword [r11 - 0],                  r12
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.31.loop_increment:
     add                  r10,                    1
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.32.loop_condition:
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                  r10
    push                   r8
    push                   r9
    call         __array_size
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     cmp                  r10,                  rsi
      jl testConstructor.27.loop_body
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.34.loop_increment:
     add                   r9,                    1
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.35.loop_condition:
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                   r8
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r9,                  rsi
      jl testConstructor.26.loop_body
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.37.loop_increment:
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
     jmp testConstructor.40.exit
testConstructor.38.loop_condition:
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl testConstructor.25.loop_body
testConstructor.40.exit:
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
error:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                    0
error.0.enter:
     mov                  rdi,      __string_const0
    call              println
error.1.exit:
     add                  rsp,                    0
     pop                  rbp
     ret
testSideEffect:
    push                  rbp
     mov                  rbp,                  rsp
    push                  rbx
     sub                  rsp,                    0
testSideEffect.0.enter:
     mov                  rdi,                    8
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov      qword [rbx - 0],                    0
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.2.enter:
     mov      qword [rbx - 0],                    0
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.3.exit:
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.4.enter:
     add      qword [rbx - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.5.exit:
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.6.enter:
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.7.exit:
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.8.enter:
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.9.exit:
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.10.enter:
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.11.exit:
     add      qword [rsi - 0],                    1
     mov                  rdi,      qword [rsi - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.12.enter:
     add      qword [rbx - 0],                    1
     mov                  rsi,                  rbx
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     jmp testSideEffect.1.exit
testSideEffect.13.exit:
     mov                  rdi,      qword [rsi - 0]
     add      qword [rsi - 0],                    1
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rdi,      qword [rbx - 0]
     sub                  rsp,                    8
    call             toString
     add                  rsp,                    8
     mov                  rbx,                  rax
     mov                  rdi,                  rbx
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
testSideEffect.1.exit:
     pop                  rbx
     add                  rsp,                    0
     pop                  rbp
     ret
print_Int:
     mov                  rsi,                  rdi
     mov                  rdi,    __print_IntFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println_Int:
     mov                  rsi,                  rdi
     mov                  rdi,  __println_IntFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
print:
     mov                  rsi,                  rdi
     mov                  rdi,        __printFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println:
     sub                  rsp,                    8
    call                 puts
     add                  rsp,                    8
     ret
getInt:
     mov                  rdi,       __getIntFormat
     mov                  rsi,           @getIntBuf
     sub                  rsp,                    8
    call                scanf
     add                  rsp,                    8
     mov                  rax,   qword [@getIntBuf]
     ret
getString:
    push                  r15
     mov                  rdi,                  300
    call               malloc
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,    __getStringFormat
     mov                  rsi,                  r15
    call                scanf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
toString:
    push                  r15
    push                  rdi
     mov                  rdi,                   20
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,     __toStringFormat
     pop                  rdx
    call              sprintf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
__array_size:
     mov                  rax,      qword [rdi - 8]
     ret
__string_length:
     mov                  rax,      qword [rdi - 8]
     ret
__string_parseInt:
     mov                  rsi,       __getIntFormat
     mov                  rdx,         @parseIntBuf
     sub                  rsp,                    8
    call               sscanf
     add                  rsp,                    8
     mov                  rax, qword [@parseIntBuf]
     ret
__string_substring:
    push                  r15
    push                  r14
     mov                  r15,                  rdi
     add                  r15,                  rsi
     mov                  r14,                  rdx
     sub                  r14,                  rsi
     add                  r14,                    1
     mov                  rdi,                  r14
     add                  rdi,                    9
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     add                  rax,                    8
     mov                  rdi,                  rax
     mov                  rsi,                  r15
     mov                  rdx,                  r14
     sub                  rsp,                    8
    call               memcpy
     add                  rsp,                    8
     mov      qword [rax - 8],                  r14
     mov                  r15,                  rax
     add                  r15,                  r14
     mov                  r15,                    0
     pop                  r14
     pop                  r15
     ret
__string_ord:
     add                  rdi,                  rsi
   movsx                  rax,           byte [rdi]
     ret
__string_connection:
    push                  r15
    push                  r14
    push                  r13
     mov                  r15,      qword [rdi - 8]
     add                  r15,      qword [rsi - 8]
     add                  r15,                    9
     mov                  r14,                  rdi
     mov                  r13,                  rsi
     mov                  rdi,                  r15
    call               malloc
     sub                  r15,                    9
     mov          qword [rax],                  r15
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,                  r14
    call               strcpy
     add                  r15,      qword [r14 - 8]
     mov                  r14,                  rax
     mov                  rdi,                  r15
     mov                  rsi,                  r13
    call               strcpy
     mov                  rax,                  r14
     pop                  r13
     pop                  r14
     pop                  r15
     ret
__string_EQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    sete                   al
     ret
__string_NEQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setne                   al
     ret
__string_GR:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    setg                   al
     ret
__string_GREQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setge                   al
     ret
__string_LE:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    setl                   al
     ret
__string_LEEQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setle                   al
     ret
SECTION .data
      dq                    6
__string_const0:
      db          "ERROR!", 0
      dq                    1
__string_const1:
      db               " ", 0
      dq                    8
__string_const2:
      db        "1 - true", 0
      dq                    9
__string_const3:
      db       "1 - false", 0
      dq                    8
__string_const4:
      db        "2 - true", 0
      dq                    9
__string_const5:
      db       "2 - false", 0
      dq                    8
__string_const6:
      db        "3 - true", 0
      dq                    9
__string_const7:
      db       "3 - false", 0
      dq                    8
__string_const8:
      db        "4 - true", 0
      dq                    9
__string_const9:
      db       "4 - false", 0
      dq                    8
__string_const10:
      db        "5 - true", 0
      dq                    9
__string_const11:
      db       "5 - false", 0
      dq                   14
__string_const12:
      db  "Constructed - ", 0
      dq                    6
__string_const13:
      db          "ERROR!", 0
      dq                    6
__string_const14:
      db          "ERROR!", 0
      dq                    8
__string_const15:
      db        "1 - true", 0
      dq                    9
__string_const16:
      db       "1 - false", 0
      dq                    8
__string_const17:
      db        "2 - true", 0
      dq                    9
__string_const18:
      db       "2 - false", 0
      dq                    8
__string_const19:
      db        "3 - true", 0
      dq                    9
__string_const20:
      db       "3 - false", 0
      dq                    8
__string_const21:
      db        "4 - true", 0
      dq                    9
__string_const22:
      db       "4 - false", 0
      dq                    8
__string_const23:
      db        "5 - true", 0
      dq                    9
__string_const24:
      db       "5 - false", 0
      dq                    1
__string_const25:
      db               " ", 0
      dq                   14
__string_const26:
      db  "Constructed - ", 0
      dq                   14
__string_const27:
      db  "Constructed - ", 0
      dq                   14
__string_const28:
      db  "Constructed - ", 0
      dq                   14
__string_const29:
      db  "Constructed - ", 0
      dq                   14
__string_const30:
      db  "Constructed - ", 0
__println_IntFormat:
      db         "%ld", 10, 0
__print_IntFormat:
      db             "%ld", 0
__printFormat:
      db              "%s", 0
__getIntFormat:
      db             "%ld", 0
__getStringFormat:
      db              "%s", 0
__toStringFormat:
      db             "%ld", 0
__parseIntFormat:
      db             "%ld", 0
SECTION .bss
@counter:
    resq                    1
@getIntBuf:
    resq                    1
@parseIntBuf:
    resq                    1
