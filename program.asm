global main
extern printf, malloc, strcpy, scanf, strlen, sscanf, sprintf, memcpy, strcmp, puts
SECTION .text
add:
    push                  rbp
     mov                  rbp,                  rsp
add.0.enter:
     mov                  r10,                  rsi
     mov                  rsi,                  rdi
     and                  rsi,                65535
     mov                   r8,                  r10
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                   16
     mov                  rdi,                  rsi
     and                  rdi,                65535
     mov                  rsi,                  r10
     sar                  rsi,                   16
     mov                   r8,                  rsi
     and                   r8,                65535
     mov                  rsi,                  rdi
     add                  rsi,                   r8
     mov                  rdi,                   r9
     sar                  rdi,                   16
     add                  rsi,                  rdi
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rdi,                   r9
     and                  rdi,                65535
      or                  rsi,                  rdi
     mov                  rax,                  rsi
add.1.exit:
     pop                  rbp
     ret
nextText:
    push                  rbp
     mov                  rbp,                  rsp
nextText.0.enter:
     mov                   r9,                  rdi
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     cmp                  rdi,                    0
     jge nextText.1.loop_body
     mov                  rax,                    0
     jmp      nextText.8.exit
nextText.1.loop_body:
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  r10,                  rdi
     sal                  r10,                    3
     mov                  rsi,                   r9
     add                  rsi,                  r10
     mov                  rsi,      qword [rsi - 0]
     cmp                  rsi,                  122
      je  nextText.10.if_true
     cmp                  rsi,                   90
      je  nextText.13.if_true
     cmp                  rsi,                   57
      je  nextText.16.if_true
     add                  rsi,                    1
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.9.enter:
     cmp                  rsi,                  122
      je  nextText.10.if_true
     cmp                  rsi,                   90
      je  nextText.13.if_true
     cmp                  rsi,                   57
      je  nextText.16.if_true
     add                  rsi,                    1
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.10.if_true:
     mov                  rsi,                    1
     neg                  rsi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.12.if_exit:
     cmp                  rsi,                   90
      je  nextText.13.if_true
     cmp                  rsi,                   57
      je  nextText.16.if_true
     add                  rsi,                    1
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.13.if_true:
     mov                  rsi,                   97
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.15.if_exit:
     cmp                  rsi,                   57
      je  nextText.16.if_true
     add                  rsi,                    1
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.16.if_true:
     mov                  rsi,                   65
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.18.if_exit:
     add                  rsi,                    1
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.19.exit:
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp       qword [r8 - 0],                  rsi
      je   nextText.2.if_true
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.2.if_true:
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,                   r9
     add                   r8,                  rsi
     mov       qword [r8 - 0],                   48
     sub                  rdi,                    1
     cmp                  rdi,                    0
     jge nextText.1.loop_body
     mov                  rax,                    0
     jmp      nextText.8.exit
nextText.3.if_false:
     mov                  rax,                    1
     jmp      nextText.8.exit
nextText.5.loop_increment:
     sub                  rdi,                    1
     cmp                  rdi,                    0
     jge nextText.1.loop_body
     mov                  rax,                    0
     jmp      nextText.8.exit
nextText.6.loop_condition:
     cmp                  rdi,                    0
     jge nextText.1.loop_body
     mov                  rax,                    0
     jmp      nextText.8.exit
nextText.7.loop_exit:
     mov                  rax,                    0
nextText.8.exit:
     pop                  rbp
     ret
main:
    push                  rbp
     mov                  rbp,                  rsp
    call   @GlobalDeclaration
     sub                  rsp,                    8
    push                  r12
    push                  r14
    push                  r13
    push                  rbx
main.1.loop_body:
     sub                  rsp,                    8
    call               getInt
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rsi,                    0
      je    main.12.loop_exit
     cmp                  rsi,                    1
      je       main.5.if_true
     cmp                  rsi,                    2
      je       main.7.if_true
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.4.if_exit:
     cmp                  rsi,                    1
      je       main.5.if_true
     cmp                  rsi,                    2
      je       main.7.if_true
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.5.if_true:
     sub                  rsp,                    8
    call            getString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rbx,                    0
    push                  rdi
    call      __string_length
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.15.loop_body
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.14.enter:
     mov                  rbx,                    0
    push                  rdi
    call      __string_length
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.15.loop_body
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.15.loop_body:
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  r12, qword [@inputBuffer - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rbx
    push                  rdi
    call         __string_ord
     pop                  rdi
     mov                  rsi,                  rax
     mov      qword [r12 - 0],                  rsi
     add                  rbx,                    1
    push                  rdi
    call      __string_length
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.15.loop_body
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.16.loop_increment:
     add                  rbx,                    1
    push                  rdi
    call      __string_length
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.15.loop_body
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.17.loop_condition:
    push                  rdi
    call      __string_length
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.15.loop_body
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.18.loop_exit:
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     sub                  rsp,                    8
    call                 sha1
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rbx,                    0
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.19.loop_body:
     mov                  rsi,                  rbx
     sal                  rsi,                    3
     mov                  rdi,                  r12
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
     sub                  rsp,                    8
    call          toStringHex
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     add                  rbx,                    1
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.20.loop_increment:
     add                  rbx,                    1
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.21.loop_condition:
     mov                  rdi,                  r12
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl    main.19.loop_body
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.22.loop_exit:
     mov                  rdi,      __string_const8
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.6.if_false:
     cmp                  rsi,                    2
      je       main.7.if_true
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.7.if_true:
     sub                  rsp,                    8
    call            getString
     add                  rsp,                    8
     mov                  rsi,                  rax
     mov                  r12,                  rsi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  rdi,                  r12
    push                   r8
    call      __string_length
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rsi,                   40
     jne      main.25.if_true
     mov                  rsi,                    0
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.24.enter:
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
    call               malloc
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov                   r8,                  rsi
     mov                  rdi,                  r12
    push                   r8
    call      __string_length
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rsi,                   40
     jne      main.25.if_true
     mov                  rsi,                    0
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.25.if_true:
     mov                  rdi,      __string_const9
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.27.if_exit:
     mov                  rsi,                    0
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.28.loop_body:
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rbx,                   r8
     add                  rbx,                  rdi
     mov      qword [rbx - 0],                    0
     add                  rsi,                    1
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.29.loop_increment:
     add                  rsi,                    1
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.30.loop_condition:
     cmp                  rsi,                    5
      jl    main.28.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.31.loop_exit:
     mov                  rsi,                    0
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.32.loop_body:
     mov                  rbx,                  rsi
     sar                  rbx,                    3
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov                  rbx,                   r8
     add                  rbx,                  rdi
     mov                  rdi,                  rsi
     sar                  rdi,                    3
     sal                  rdi,                    3
     mov                  r13,                   r8
     add                  r13,                  rdi
     mov                   r9,                  rsi
     add                   r9,                    3
     mov                  rdi,                  r12
     mov                  rdx,                   r9
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call   __string_substring
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call              hex2int
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rdi,                  rax
     mov                   r9,                  rsi
     sar                   r9,                    2
     mov                  r14,                   r9
     mov                  rax,                  r14
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  r14,                  rdx
     mov                   r9,                    1
     sub                   r9,                  r14
    imul                   r9,                   16
     mov                  rcx,                   r9
     sal                  rdi,                   cl
     mov                  r13,      qword [r13 - 0]
      or                  r13,                  rdi
     mov      qword [rbx - 0],                  r13
     add                  rsi,                    4
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.33.loop_increment:
     add                  rsi,                    4
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.34.loop_condition:
     cmp                  rsi,                   40
      jl    main.32.loop_body
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.35.loop_exit:
     mov                  r12,                    4
     mov                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.36.loop_body:
     mov                  rsi,                    0
     cmp                  rsi,                  rbx
      jl    main.37.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.37.loop_body:
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  r13, qword [@inputBuffer - 0]
     add                  r13,                  rdi
     mov      qword [r13 - 0],                   48
     add                  rsi,                    1
     cmp                  rsi,                  rbx
      jl    main.37.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.38.loop_increment:
     add                  rsi,                    1
     cmp                  rsi,                  rbx
      jl    main.37.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.39.loop_condition:
     cmp                  rsi,                  rbx
      jl    main.37.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.41.loop_body:
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rsi,                  rbx
    push                   r8
    call                 sha1
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  rsi,                   r8
    push                   r8
    call          array_equal
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rsi,                    1
      je      main.42.if_true
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rsi,                  rbx
    push                   r8
    call             nextText
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rsi,                    1
     jne main.54.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.42.if_true:
     mov                  rsi,                    0
     cmp                  rsi,                  rbx
      jl    main.43.loop_body
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.43.loop_body:
     mov                  r12,                  rsi
     sal                  r12,                    3
     mov                  rdi, qword [@inputBuffer - 0]
     add                  rdi,                  r12
     mov                  rdi,      qword [rdi - 0]
    push                  rsi
    call              int2chr
     pop                  rsi
     mov                  rdi,                  rax
    push                  rsi
    call                print
     pop                  rsi
     add                  rsi,                    1
     cmp                  rsi,                  rbx
      jl    main.43.loop_body
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.44.loop_increment:
     add                  rsi,                    1
     cmp                  rsi,                  rbx
      jl    main.43.loop_body
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.45.loop_condition:
     cmp                  rsi,                  rbx
      jl    main.43.loop_body
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.46.loop_exit:
     mov                  rdi,     __string_const10
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.48.if_exit:
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rsi,                  rbx
    push                   r8
    call             nextText
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rsi,                    1
     jne main.54.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.52.loop_condition:
     mov                  rax,                    1
     cmp                  rax,                    1
      je    main.41.loop_body
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.54.loop_increment:
     add                  rbx,                    1
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.55.loop_condition:
     cmp                  rbx,                  r12
     jle    main.36.loop_body
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.56.loop_exit:
     mov                  rdi,     __string_const11
     sub                  rsp,                    8
    call              println
     add                  rsp,                    8
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.11.loop_condition:
     mov                  rax,                    1
     cmp                  rax,                    1
      je     main.1.loop_body
     mov                  rax,                    0
     jmp         main.13.exit
main.12.loop_exit:
     mov                  rax,                    0
main.13.exit:
     pop                  rbx
     pop                  r13
     pop                  r14
     pop                  r12
     add                  rsp,                    8
     pop                  rbp
     ret
hex2int:
    push                  rbp
     mov                  rbp,                  rsp
    push                  r12
    push                  rbx
hex2int.0.enter:
     mov                  r12,                    0
     mov                  rbx,                    0
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.1.loop_body:
     mov                  rsi,                  rbx
    push                  rdi
     sub                  rsp,                    8
    call         __string_ord
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     cmp                   r8,                   48
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.3.logical_false
     cmp                   r8,                   57
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je    hex2int.5.if_true
     cmp                   r8,                   65
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.8.logical_false
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.2.logical_true:
     cmp                   r8,                   57
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je    hex2int.5.if_true
     cmp                   r8,                   65
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.8.logical_false
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.3.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je    hex2int.5.if_true
     cmp                   r8,                   65
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.8.logical_false
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.4.logical_exit:
     cmp                  rsi,                    1
      je    hex2int.5.if_true
     cmp                   r8,                   65
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.8.logical_false
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.5.if_true:
     mov                  rsi,                  r12
    imul                  rsi,                   16
     add                  rsi,                   r8
     sub                  rsi,                   48
     mov                  r12,                  rsi
     add                  rbx,                    1
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.6.if_false:
     cmp                   r8,                   65
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.8.logical_false
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.7.logical_true:
     cmp                   r8,                   70
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.8.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.9.logical_exit:
     cmp                  rsi,                    1
      je   hex2int.10.if_true
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.10.if_true:
     mov                  rsi,                  r12
    imul                  rsi,                   16
     add                  rsi,                   r8
     sub                  rsi,                   65
     add                  rsi,                   10
     mov                  r12,                  rsi
     add                  rbx,                    1
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.11.if_false:
     cmp                   r8,                   97
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne hex2int.13.logical_false
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.12.logical_true:
     cmp                   r8,                  102
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.13.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.14.logical_exit:
     cmp                  rsi,                    1
      je   hex2int.15.if_true
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.15.if_true:
     mov                  rsi,                  r12
    imul                  rsi,                   16
     add                  rsi,                   r8
     sub                  rsi,                   97
     add                  rsi,                   10
     mov                  r12,                  rsi
     add                  rbx,                    1
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.16.if_false:
     mov                  rax,                    0
     jmp      hex2int.23.exit
hex2int.20.loop_increment:
     add                  rbx,                    1
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.21.loop_condition:
    push                  rdi
     sub                  rsp,                    8
    call      __string_length
     add                  rsp,                    8
     pop                  rdi
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl  hex2int.1.loop_body
     mov                  rax,                  r12
     jmp      hex2int.23.exit
hex2int.22.loop_exit:
     mov                  rax,                  r12
hex2int.23.exit:
     pop                  rbx
     pop                  r12
     pop                  rbp
     ret
crackSHA1:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                  104
    push                  rbx
    push                  r12
    push                  r14
    push                  r13
    push                  r15
crackSHA1.0.enter:
     mov                  r12,                  rdi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov                  rbx,                  rsi
     mov                  rdi,                  r12
    call      __string_length
     mov                  rsi,                  rax
     cmp                  rsi,                   40
     jne  crackSHA1.1.if_true
     mov                  r13,                    0
     cmp                  r13,                    5
      jl crackSHA1.4.loop_body
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.1.if_true:
     mov                  rdi,      __string_const1
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.3.if_exit:
     mov                  r13,                    0
     cmp                  r13,                    5
      jl crackSHA1.4.loop_body
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.4.loop_body:
     mov                  rdi,                  r13
     sal                  rdi,                    3
     mov                  rsi,                  rbx
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                    0
     add                  r13,                    1
     cmp                  r13,                    5
      jl crackSHA1.4.loop_body
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.5.loop_increment:
     add                  r13,                    1
     cmp                  r13,                    5
      jl crackSHA1.4.loop_body
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.6.loop_condition:
     cmp                  r13,                    5
      jl crackSHA1.4.loop_body
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.7.loop_exit:
     mov                  r13,                    0
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.8.loop_body:
     mov                  rsi,                  r13
     sar                  rsi,                    3
     sal                  rsi,                    3
     mov                   r8,                  rbx
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sar                  rsi,                    3
     sal                  rsi,                    3
     mov                   r9,                  rbx
     add                   r9,                  rsi
     mov                  r14,                  r13
     add                  r14,                    3
     mov                  rdi,                  r12
     mov                  rsi,                  r13
     mov                  rdx,                  r14
    push                   r8
    push                   r9
    call   __string_substring
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
     mov                  r14,                    0
     mov                  rsi,                    0
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.34.enter:
     mov                  r14,                    0
     mov                  rsi,                    0
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.35.loop_body:
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call         __string_ord
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     mov                  r15,                  r10
     cmp                  r15,                   48
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.37.logical_false
     cmp                  r15,                   57
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.39.if_true
     cmp                  r15,                   65
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.42.logical_false
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.36.logical_true:
     cmp                  r15,                   57
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.39.if_true
     cmp                  r15,                   65
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.42.logical_false
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.37.logical_false:
     mov                  r10,                    0
     cmp                  r10,                    1
      je crackSHA1.39.if_true
     cmp                  r15,                   65
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.42.logical_false
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.38.logical_exit:
     cmp                  r10,                    1
      je crackSHA1.39.if_true
     cmp                  r15,                   65
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.42.logical_false
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.39.if_true:
    imul                  r14,                   16
     add                  r14,                  r15
     sub                  r14,                   48
     add                  rsi,                    1
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.40.if_false:
     cmp                  r15,                   65
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.42.logical_false
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.41.logical_true:
     cmp                  r15,                   70
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.42.logical_false:
     mov                  r10,                    0
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.43.logical_exit:
     cmp                  r10,                    1
      je crackSHA1.44.if_true
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.44.if_true:
    imul                  r14,                   16
     add                  r14,                  r15
     sub                  r14,                   65
     add                  r14,                   10
     add                  rsi,                    1
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.45.if_false:
     cmp                  r15,                   97
     mov                  r10,                    0
   setge                 r10b
     cmp                  r10,                    1
     jne crackSHA1.47.logical_false
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.46.logical_true:
     cmp                  r15,                  102
     mov                  r10,                    0
   setle                 r10b
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.47.logical_false:
     mov                  r10,                    0
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.48.logical_exit:
     cmp                  r10,                    1
      je crackSHA1.49.if_true
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.49.if_true:
    imul                  r14,                   16
     add                  r14,                  r15
     sub                  r14,                   97
     add                  r14,                   10
     add                  rsi,                    1
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.50.if_false:
     mov                  rsi,                    0
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.54.loop_increment:
     add                  rsi,                    1
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.55.loop_condition:
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call      __string_length
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  r10,                  rax
     cmp                  rsi,                  r10
      jl crackSHA1.35.loop_body
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.56.loop_exit:
     mov                  rsi,                  r14
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.57.exit:
     mov                  rdi,                  r13
     sar                  rdi,                    2
     mov                  rax,                  rdi
     mov                  rcx,                    2
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  r14,                    1
     sub                  r14,                  rdi
     mov                  rdi,                  r14
    imul                  rdi,                   16
     mov                  r14,                  rsi
     mov                  rcx,                  rdi
     sal                  r14,                   cl
     mov                  rsi,       qword [r9 - 0]
      or                  rsi,                  r14
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.9.loop_increment:
     mov                  rsi,                  r13
     add                  rsi,                    4
     mov                  r13,                  rsi
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.10.loop_condition:
     cmp                  r13,                   40
      jl crackSHA1.8.loop_body
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.11.loop_exit:
     mov      qword [rbp - 8],                    4
     mov     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.12.loop_body:
     mov                  r13,                    0
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.13.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.13.loop_body:
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                  rdi, qword [@inputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   48
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.13.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.14.loop_increment:
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.13.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.15.loop_condition:
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.13.loop_body
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.17.loop_body:
     mov                  r14, qword [@inputBuffer - 0]
     mov                  r15,     qword [rbp - 16]
     mov                  rsi,                  r15
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg crackSHA1.59.if_true
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.58.enter:
     mov                  rsi,                  r15
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg crackSHA1.59.if_true
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     jmp crackSHA1.72.loop_condition
crackSHA1.59.if_true:
     mov                  rdi,     __string_const12
    call              println
     mov                  rsi,                    0
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.61.if_exit:
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     jmp crackSHA1.73.loop_exit
crackSHA1.62.loop_body:
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.63.loop_body
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.63.loop_body:
     mov                  rdi,                   r9
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  r11
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                    0
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.63.loop_body
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.64.loop_increment:
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.63.loop_body
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.65.loop_condition:
     cmp                  r11,                   80
      jl crackSHA1.63.loop_body
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     jmp crackSHA1.72.loop_condition
crackSHA1.67.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     jmp crackSHA1.73.loop_exit
crackSHA1.68.loop_condition:
     cmp                   r9,                  r12
      jl crackSHA1.62.loop_body
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.69.loop_exit:
     mov                   r9,                    0
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.70.loop_body:
     mov                  rsi,                   r9
     sar                  rsi,                    6
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   r9
     mov                  rax,                  rdi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     sar                  rdi,                    2
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   r9
     sar                  rdi,                    6
     mov                   r8,                  rdi
     sal                   r8,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                   r8
     mov                   r8,                   r9
     mov                  rax,                   r8
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                   r8,                  rdx
     sar                   r8,                    2
     sal                   r8,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                   r8
     mov                   r8,                   r9
     sal                   r8,                    3
     mov                  r10,                  r14
     add                  r10,                   r8
     mov                   r8,                   r9
     mov                  rax,                   r8
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                   r8,                  rdx
     mov                  r13,                    3
     sub                  r13,                   r8
     mov                   r8,                  r13
    imul                   r8,                    8
     mov                  r13,      qword [r10 - 0]
     mov                  rcx,                   r8
     sal                  r13,                   cl
     mov                  rdi,      qword [rdi - 0]
      or                  rdi,                  r13
     mov      qword [rsi - 0],                  rdi
     add                   r9,                    1
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.71.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.72.loop_condition:
     cmp                   r9,                  r15
      jl crackSHA1.70.loop_body
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.73.loop_exit:
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                   r9
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r13,                   r9
     mov                  rax,                  r13
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  r13,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  r13
     mov                  r13,                  rsi
    imul                  r13,                    8
     mov                  rsi,                  128
     mov                  rcx,                  r13
     sal                  rsi,                   cl
     mov                   r8,       qword [r8 - 0]
      or                   r8,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   15
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov      qword [rdi - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 48],           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    call                 lohi
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  r13,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                   r8
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                   r9,                    0
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.74.loop_body:
     mov                  r11,                   16
     cmp                  r11,                   80
      jl crackSHA1.75.loop_body
     mov                  rax,     qword [rbp - 48]
     mov     qword [rbp - 72],                  rax
     mov                  rax,     qword [rbp - 56]
     mov     qword [rbp - 80],                  rax
     mov                  rdi,                   r8
     mov     qword [rbp - 88],                  r13
     mov                  r14,                  r10
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.75.loop_body:
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r14,      qword [rdi - 0]
     add                  r14,                  rsi
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r11
     sub                  rsi,                    3
     sal                  rsi,                    3
     mov                  r15,      qword [rdi - 0]
     add                  r15,                  rsi
     mov                  rdi,                   r9
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  r11
     sub                  rdi,                    8
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  r15,      qword [r15 - 0]
     xor                  r15,      qword [rsi - 0]
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r11
     sub                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     xor                  r15,      qword [rdi - 0]
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r11
     sub                  rsi,                   16
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     xor                  rsi,      qword [rdi - 0]
     mov                  rsi,                    1
    push                  r10
    push                  r11
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  r11
     pop                  r10
     mov      qword [r14 - 0],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.75.loop_body
     mov                  rax,     qword [rbp - 48]
     mov     qword [rbp - 72],                  rax
     mov                  rax,     qword [rbp - 56]
     mov     qword [rbp - 80],                  rax
     mov                  rdi,                   r8
     mov     qword [rbp - 88],                  r13
     mov                  r14,                  r10
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.76.loop_increment:
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.75.loop_body
     mov                  rax,     qword [rbp - 48]
     mov     qword [rbp - 72],                  rax
     mov                  rax,     qword [rbp - 56]
     mov     qword [rbp - 80],                  rax
     mov                  rdi,                   r8
     mov     qword [rbp - 88],                  r13
     mov                  r14,                  r10
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.77.loop_condition:
     cmp                  r11,                   80
      jl crackSHA1.75.loop_body
     mov                  rax,     qword [rbp - 48]
     mov     qword [rbp - 72],                  rax
     mov                  rax,     qword [rbp - 56]
     mov     qword [rbp - 80],                  rax
     mov                  rdi,                   r8
     mov     qword [rbp - 88],                  r13
     mov                  r14,                  r10
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.78.loop_exit:
     mov                  rax,     qword [rbp - 48]
     mov     qword [rbp - 72],                  rax
     mov                  rax,     qword [rbp - 56]
     mov     qword [rbp - 80],                  rax
     mov                  rdi,                   r8
     mov     qword [rbp - 88],                  r13
     mov                  r14,                  r10
     mov                  r11,                    0
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.79.loop_body:
     cmp                  r11,                   20
      jl crackSHA1.80.if_true
     cmp                  r11,                   40
      jl crackSHA1.82.if_true
     cmp                  r11,                   60
      jl crackSHA1.84.if_true
     mov                  rsi,     qword [rbp - 80]
     xor                  rsi,                  rdi
     xor                  rsi,     qword [rbp - 88]
     mov                  r15,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov     qword [rbp - 96],                  rsi
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.80.if_true:
     mov                  r15,     qword [rbp - 80]
     and                  r15,                  rdi
     mov                  rsi,     qword [rbp - 80]
     not                  rsi
     and                  rsi,     qword [rbp - 88]
      or                  r15,                  rsi
     mov     qword [rbp - 96],           1518500249
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.81.if_false:
     cmp                  r11,                   40
      jl crackSHA1.82.if_true
     cmp                  r11,                   60
      jl crackSHA1.84.if_true
     mov                  rsi,     qword [rbp - 80]
     xor                  rsi,                  rdi
     xor                  rsi,     qword [rbp - 88]
     mov                  r15,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov     qword [rbp - 96],                  rsi
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.82.if_true:
     mov                  rsi,     qword [rbp - 80]
     xor                  rsi,                  rdi
     xor                  rsi,     qword [rbp - 88]
     mov                  r15,                  rsi
     mov     qword [rbp - 96],           1859775393
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.83.if_false:
     cmp                  r11,                   60
      jl crackSHA1.84.if_true
     mov                  rsi,     qword [rbp - 80]
     xor                  rsi,                  rdi
     xor                  rsi,     qword [rbp - 88]
     mov                  r15,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov     qword [rbp - 96],                  rsi
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.84.if_true:
     mov                  rsi,     qword [rbp - 80]
     and                  rsi,                  rdi
     mov                  r15,     qword [rbp - 80]
     and                  r15,     qword [rbp - 88]
      or                  rsi,                  r15
     mov                  r15,                  rdi
     and                  r15,     qword [rbp - 88]
      or                  rsi,                  r15
     mov                  r15,                  rsi
     mov                  rdi,                48348
     mov                  rsi,                36635
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov     qword [rbp - 96],                  rsi
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.85.if_false:
     mov                  rsi,     qword [rbp - 80]
     xor                  rsi,                  rdi
     xor                  rsi,     qword [rbp - 88]
     mov                  r15,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov     qword [rbp - 96],                  rsi
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.88.if_exit:
     mov                  rdi,     qword [rbp - 72]
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  r15
     mov                  rsi,     qword [rbp - 96]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,                  rax
     mov                  rsi,                   r9
     sal                  rsi,                    3
     mov                  r15,  qword [@chunks - 0]
     add                  r15,                  rsi
     mov                  rsi,                  r11
     sal                  rsi,                    3
     mov                  r15,      qword [r15 - 0]
     add                  r15,                  rsi
     mov                  rdi,                  r14
     mov                  rsi,      qword [r15 - 0]
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  r14,     qword [rbp - 88]
     mov     qword [rbp - 88],                  rdi
     mov                  rdi,     qword [rbp - 80]
     mov                  rsi,                   30
    push                  r10
    push                  r11
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r11
     pop                  r10
     mov                  rax,     qword [rbp - 72]
     mov     qword [rbp - 80],                  rax
     mov     qword [rbp - 72],                  rsi
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.89.loop_increment:
     add                  r11,                    1
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.90.loop_condition:
     cmp                  r11,                   80
      jl crackSHA1.79.loop_body
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.91.loop_exit:
     mov                  rdi,     qword [rbp - 48]
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,     qword [rbp - 80]
    push                  r10
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     pop                  r10
     mov     qword [rbp - 56],                  rsi
     mov                  rdi,                   r8
     mov                  rsi,                  rdi
    push                  r10
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                  r10
     mov                   r8,                  rsi
     mov                  rdi,                  r13
     mov                  rsi,     qword [rbp - 88]
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,                  r14
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.92.loop_increment:
     add                   r9,                    1
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.93.loop_condition:
     cmp                   r9,                  r12
      jl crackSHA1.74.loop_body
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.94.loop_exit:
     mov                  rdi,                    0
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rsi - 0],                  rax
     mov                  rdi,                    1
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov                  rax,     qword [rbp - 56]
     mov      qword [rsi - 0],                  rax
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   r8
     mov                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r13
     mov                  rdi,                    4
     sal                  rdi,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rdi
     mov      qword [rsi - 0],                  r10
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.95.exit:
     mov                  r12,                  rsi
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.96.enter:
     mov                  rdi,                  r12
    call         __array_size
     mov                   r8,                  rax
     mov                  rdi,                  rbx
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
     jne crackSHA1.97.if_true
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.97.if_true:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.99.if_exit:
     mov                   r8,                    0
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.100.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rdi,                  r12
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  r13,                  rbx
     add                  r13,                  rsi
     mov                  rsi,      qword [rdi - 0]
     cmp                  rsi,      qword [r13 - 0]
     jne crackSHA1.101.if_true
     add                   r8,                    1
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.101.if_true:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.104.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.105.loop_condition:
     mov                  rdi,                  r12
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl crackSHA1.100.loop_body
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.106.loop_exit:
     mov                  rsi,                    1
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.107.exit:
     cmp                  rsi,                    1
      je crackSHA1.18.if_true
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.18.if_true:
     mov                  r13,                    0
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.19.loop_body:
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                  rbx, qword [@inputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rsi,      qword [rbx - 0]
     cmp                  rsi,                   32
     mov                  rbx,                    0
   setge                   bl
     cmp                  rbx,                    1
     jne crackSHA1.110.logical_false
     cmp                  rsi,                  126
     mov                  rbx,                    0
   setle                   bl
     cmp                  rbx,                    1
      je crackSHA1.112.if_true
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.108.enter:
     cmp                  rsi,                   32
     mov                  rbx,                    0
   setge                   bl
     cmp                  rbx,                    1
     jne crackSHA1.110.logical_false
     cmp                  rsi,                  126
     mov                  rbx,                    0
   setle                   bl
     cmp                  rbx,                    1
      je crackSHA1.112.if_true
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.109.logical_true:
     cmp                  rsi,                  126
     mov                  rbx,                    0
   setle                   bl
     cmp                  rbx,                    1
      je crackSHA1.112.if_true
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.110.logical_false:
     mov                  rbx,                    0
     cmp                  rbx,                    1
      je crackSHA1.112.if_true
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.111.logical_exit:
     cmp                  rbx,                    1
      je crackSHA1.112.if_true
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.112.if_true:
     mov                  r12,                  rsi
     sub                  r12,                   32
     mov                  rbx,                  rsi
     sub                  rbx,                   32
     mov                  rdi, qword [@asciiTable - 0]
     mov                  rsi,                  r12
     mov                  rdx,                  rbx
    call   __string_substring
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.114.if_exit:
     mov                  rsi,     __string_const13
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.115.exit:
     mov                  rdi,                  rsi
    call                print
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.20.loop_increment:
     add                  r13,                    1
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.21.loop_condition:
     cmp                  r13,     qword [rbp - 16]
      jl crackSHA1.19.loop_body
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.22.loop_exit:
     mov                  rdi,      __string_const2
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.24.if_exit:
     mov                  r12, qword [@inputBuffer - 0]
     mov                  rsi,     qword [rbp - 16]
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.116.enter:
     sub                  rsi,                    1
     mov                   r8,                  rsi
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.117.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  r13,                  r12
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rdi,                  r12
     add                  rdi,                  rsi
     mov                  rdi,      qword [rdi - 0]
    push                   r8
     sub                  rsp,                    8
    call           nextLetter
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rdi,                  r12
     add                  rdi,                  rsi
     mov                  rsi,                    1
     neg                  rsi
     cmp      qword [rdi - 0],                  rsi
      je crackSHA1.118.if_true
     mov                  rsi,                    1
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.118.if_true:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rdi,                  r12
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                   48
     sub                   r8,                    1
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.119.if_false:
     mov                  rsi,                    1
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.121.loop_increment:
     sub                   r8,                    1
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.122.loop_condition:
     cmp                   r8,                    0
     jge crackSHA1.117.loop_body
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.123.loop_exit:
     mov                  rsi,                    0
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.124.exit:
     cmp                  rsi,                    1
     jne crackSHA1.30.loop_increment
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.28.loop_condition:
     mov                  rax,                    1
     cmp                  rax,                    1
      je crackSHA1.17.loop_body
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.30.loop_increment:
     add     qword [rbp - 16],                    1
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.31.loop_condition:
     mov                  rax,     qword [rbp - 16]
     cmp                  rax,      qword [rbp - 8]
     jle crackSHA1.12.loop_body
     mov                  rdi,      __string_const3
    call              println
     jmp    crackSHA1.33.exit
crackSHA1.32.loop_exit:
     mov                  rdi,      __string_const3
    call              println
crackSHA1.33.exit:
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     pop                  rbx
     add                  rsp,                  104
     pop                  rbp
     ret
computeSHA1:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                   72
    push                  r12
    push                  r14
    push                  r13
    push                  r15
    push                  rbx
computeSHA1.0.enter:
     mov                   r8,                    0
    push                   r8
    push                  rdi
    call      __string_length
     pop                  rdi
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.1.loop_body
    call      __string_length
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     jmp computeSHA1.25.loop_exit
computeSHA1.1.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx, qword [@inputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rsi,                   r8
    push                   r8
    push                  rdi
    call         __string_ord
     pop                  rdi
     pop                   r8
     mov                  rsi,                  rax
     mov      qword [rbx - 0],                  rsi
     add                   r8,                    1
    push                   r8
    push                  rdi
    call      __string_length
     pop                  rdi
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.1.loop_body
    call      __string_length
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     jmp computeSHA1.24.loop_condition
computeSHA1.2.loop_increment:
     add                   r8,                    1
    push                   r8
    push                  rdi
    call      __string_length
     pop                  rdi
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.1.loop_body
    call      __string_length
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     jmp computeSHA1.25.loop_exit
computeSHA1.3.loop_condition:
    push                   r8
    push                  rdi
    call      __string_length
     pop                  rdi
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.1.loop_body
    call      __string_length
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.4.loop_exit:
    call      __string_length
     mov                  rsi,                  rax
     mov                  rdi, qword [@inputBuffer - 0]
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.10.enter:
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov                  r12,                  rsi
     cmp                  r12, qword [@MAXCHUNK - 0]
      jg computeSHA1.11.if_true
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     jmp computeSHA1.24.loop_condition
computeSHA1.11.if_true:
     mov                  rdi,     __string_const14
    call              println
     mov                  rsi,                    0
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.13.if_exit:
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     jmp computeSHA1.25.loop_exit
computeSHA1.14.loop_body:
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.15.loop_body
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.15.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  r13,  qword [@chunks - 0]
     add                  r13,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov                  r13,      qword [r13 - 0]
     add                  r13,                  rsi
     mov      qword [r13 - 0],                    0
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.15.loop_body
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.16.loop_increment:
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.15.loop_body
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.17.loop_condition:
     cmp                  r15,                   80
      jl computeSHA1.15.loop_body
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     jmp computeSHA1.24.loop_condition
computeSHA1.19.loop_increment:
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     jmp computeSHA1.25.loop_exit
computeSHA1.20.loop_condition:
     cmp                   r8,                  r12
      jl computeSHA1.14.loop_body
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.21.loop_exit:
     mov                   r8,                    0
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.22.loop_body:
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r13,  qword [@chunks - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [r13 - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r9,  qword [@chunks - 0]
     add                   r9,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r14,       qword [r9 - 0]
     add                  r14,                  rsi
     mov                   r9,                   r8
     sal                   r9,                    3
     mov                  rsi,                  rdi
     add                  rsi,                   r9
     mov                   r9,                   r8
     mov                  rax,                   r9
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                   r9,                  rdx
     mov                  r10,                    3
     sub                  r10,                   r9
    imul                  r10,                    8
     mov                   r9,      qword [rsi - 0]
     mov                  rcx,                  r10
     sal                   r9,                   cl
     mov                  rsi,      qword [r14 - 0]
      or                  rsi,                   r9
     mov      qword [r13 - 0],                  rsi
     add                   r8,                    1
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.23.loop_increment:
     add                   r8,                    1
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.24.loop_condition:
     cmp                   r8,                  rbx
      jl computeSHA1.22.loop_body
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.25.loop_exit:
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,      qword [rdi - 0]
     add                  r13,                  rsi
     mov                  rsi,                   r8
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   r8
     mov                  rax,                  rsi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     mov                   r8,                    3
     sub                   r8,                  rsi
     mov                  rsi,                   r8
    imul                  rsi,                    8
     mov                   r8,                  128
     mov                  rcx,                  rsi
     sal                   r8,                   cl
     mov                  rsi,      qword [rdi - 0]
      or                  rsi,                   r8
     mov      qword [r13 - 0],                  rsi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   15
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,                  r12
     sub                  rsi,                    1
     mov                  rdi,                  rsi
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   14
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     sar                  rbx,                   29
     and                  rbx,                    7
     mov      qword [rsi - 0],                  rbx
     mov                  r13,           1732584193
     mov                  rdi,                43913
     mov                  rsi,                61389
    call                 lohi
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,                56574
     mov                  rsi,                39098
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rbx,            271733878
     mov                  rdi,                57840
     mov                  rsi,                50130
    push                  r10
     sub                  rsp,                    8
    call                 lohi
     add                  rsp,                    8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     mov                   r8,                    0
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.26.loop_body:
     mov                  r15,                   16
     cmp                  r15,                   80
      jl computeSHA1.27.loop_body
     mov                  rdi,                  r13
     mov     qword [rbp - 56],                  r10
     mov                   r9,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rbx
     mov                  r14,     qword [rbp - 40]
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.27.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  r15
     sal                  rsi,                    3
     mov                   r9,      qword [rdi - 0]
     add                   r9,                  rsi
     mov                  rdi,                   r8
     sal                  rdi,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  rdi
     mov                  rdi,                  r15
     sub                  rdi,                    3
     sal                  rdi,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  rdi
     mov                  rdi,                   r8
     sal                  rdi,                    3
     mov                  r14,  qword [@chunks - 0]
     add                  r14,                  rdi
     mov                  rdi,                  r15
     sub                  rdi,                    8
     sal                  rdi,                    3
     mov                  r14,      qword [r14 - 0]
     add                  r14,                  rdi
     mov                  rsi,      qword [rsi - 0]
     xor                  rsi,      qword [r14 - 0]
     mov                  rdi,                   r8
     sal                  rdi,                    3
     mov                  r14,  qword [@chunks - 0]
     add                  r14,                  rdi
     mov                  rdi,                  r15
     sub                  rdi,                   14
     sal                  rdi,                    3
     mov                  r14,      qword [r14 - 0]
     add                  r14,                  rdi
     mov                  rdi,                  rsi
     xor                  rdi,      qword [r14 - 0]
     mov                  r14,                   r8
     sal                  r14,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r14
     mov                  r14,                  r15
     sub                  r14,                   16
     sal                  r14,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r14
     xor                  rdi,      qword [rsi - 0]
     mov                  rsi,                    1
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov       qword [r9 - 0],                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.27.loop_body
     mov                  rdi,                  r13
     mov     qword [rbp - 56],                  r10
     mov                   r9,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rbx
     mov                  r14,     qword [rbp - 40]
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.28.loop_increment:
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.27.loop_body
     mov                  rdi,                  r13
     mov     qword [rbp - 56],                  r10
     mov                   r9,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rbx
     mov                  r14,     qword [rbp - 40]
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.29.loop_condition:
     cmp                  r15,                   80
      jl computeSHA1.27.loop_body
     mov                  rdi,                  r13
     mov     qword [rbp - 56],                  r10
     mov                   r9,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rbx
     mov                  r14,     qword [rbp - 40]
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.30.loop_exit:
     mov                  rdi,                  r13
     mov     qword [rbp - 56],                  r10
     mov                   r9,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rbx
     mov                  r14,     qword [rbp - 40]
     mov                  r15,                    0
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.31.loop_body:
     cmp                  r15,                   20
      jl computeSHA1.32.if_true
     cmp                  r15,                   40
      jl computeSHA1.34.if_true
     cmp                  r15,                   60
      jl computeSHA1.36.if_true
     mov                  rsi,     qword [rbp - 56]
     xor                  rsi,                   r9
     xor                  rsi,     qword [rbp - 64]
     mov                  r11,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov     qword [rbp - 72],                  rsi
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.32.if_true:
     mov                  rsi,     qword [rbp - 56]
     and                  rsi,                   r9
     mov                  r11,     qword [rbp - 56]
     not                  r11
     and                  r11,     qword [rbp - 64]
      or                  rsi,                  r11
     mov                  r11,                  rsi
     mov     qword [rbp - 72],           1518500249
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.33.if_false:
     cmp                  r15,                   40
      jl computeSHA1.34.if_true
     cmp                  r15,                   60
      jl computeSHA1.36.if_true
     mov                  rsi,     qword [rbp - 56]
     xor                  rsi,                   r9
     xor                  rsi,     qword [rbp - 64]
     mov                  r11,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov     qword [rbp - 72],                  rsi
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.34.if_true:
     mov                  rsi,     qword [rbp - 56]
     xor                  rsi,                   r9
     xor                  rsi,     qword [rbp - 64]
     mov                  r11,                  rsi
     mov     qword [rbp - 72],           1859775393
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.35.if_false:
     cmp                  r15,                   60
      jl computeSHA1.36.if_true
     mov                  rsi,     qword [rbp - 56]
     xor                  rsi,                   r9
     xor                  rsi,     qword [rbp - 64]
     mov                  r11,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov     qword [rbp - 72],                  rsi
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.36.if_true:
     mov                  r11,     qword [rbp - 56]
     and                  r11,                   r9
     mov                  rsi,     qword [rbp - 56]
     and                  rsi,     qword [rbp - 64]
      or                  r11,                  rsi
     mov                  rsi,                   r9
     and                  rsi,     qword [rbp - 64]
      or                  r11,                  rsi
     mov                  rdi,                48348
     mov                  rsi,                36635
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov     qword [rbp - 72],                  rsi
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.37.if_false:
     mov                  rsi,     qword [rbp - 56]
     xor                  rsi,                   r9
     xor                  rsi,     qword [rbp - 64]
     mov                  r11,                  rsi
     mov                  rdi,                49622
     mov                  rsi,                51810
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                 lohi
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov     qword [rbp - 72],                  rsi
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.40.if_exit:
     mov                  rsi,                    5
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call          rotate_left
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  r11
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
    call                  add
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r11
     pop                  r10
     mov                  rdi,                  r11
     mov                  rsi,     qword [rbp - 72]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  rdi,                  rsi
     mov                  rsi,                  r14
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,                  rax
     mov                  r11,                   r8
     sal                  r11,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r11
     mov                  r11,                  r15
     sal                  r11,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r11
     mov                  rsi,      qword [rsi - 0]
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov                  r14,     qword [rbp - 64]
     mov     qword [rbp - 64],                   r9
     mov                  rdi,     qword [rbp - 56]
     mov                  rsi,                   30
    push                  r10
    push                  rdi
    push                   r8
    push                   r9
    push                  rsi
     sub                  rsp,                    8
    call          rotate_left
     add                  rsp,                    8
     pop                  rsi
     pop                   r9
     pop                   r8
     pop                  rdi
     pop                  r10
     mov     qword [rbp - 56],                  rdi
     mov                  rdi,                  rsi
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.41.loop_increment:
     add                  r15,                    1
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.42.loop_condition:
     cmp                  r15,                   80
      jl computeSHA1.31.loop_body
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.43.loop_exit:
     mov                  rdi,                  r13
     mov                  rsi,                  rdi
    push                  r10
    push                   r8
    push                   r9
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r9
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  r13,                  rsi
     mov                  rdi,                  r10
     mov                  rsi,     qword [rbp - 56]
    push                   r8
    push                   r9
    call                  add
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  r10,                  rsi
     mov                  rdi,     qword [rbp - 32]
     mov                  rsi,                   r9
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 32],                  rsi
     mov                  rdi,                  rbx
     mov                  rsi,     qword [rbp - 64]
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     mov                  rdi,     qword [rbp - 40]
     mov                  rsi,                  r14
    push                  r10
    push                   r8
    call                  add
     pop                   r8
     pop                  r10
     mov                  rsi,                  rax
     mov     qword [rbp - 40],                  rsi
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.44.loop_increment:
     add                   r8,                    1
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.45.loop_condition:
     cmp                   r8,                  r12
      jl computeSHA1.26.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.46.loop_exit:
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r13
     mov                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  r10
     mov                  rsi,                    2
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rdi - 0],                  rax
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rdi, qword [@outputBuffer - 0]
     add                  rdi,                  rsi
     mov      qword [rdi - 0],                  rbx
     mov                  rbx,                    4
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rsi, qword [@outputBuffer - 0]
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.47.exit:
     mov                  r13,                  rsi
     mov                   r8,                    0
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.5.loop_body:
     mov                  rsi,                   r8
     sal                  rsi,                    3
     mov                  rbx,                  r13
     add                  rbx,                  rsi
     mov                  r12,      qword [rbx - 0]
     mov                   r9,     __string_const15
     mov                  rbx,                   28
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.48.enter:
     mov                   r9,     __string_const15
     mov                  rbx,                   28
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.49.loop_body:
     mov                  rsi,                  r12
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     and                  rsi,                   15
     cmp                  rsi,                   10
      jl computeSHA1.50.if_true
     mov                  rdi,                   65
     add                  rdi,                  rsi
     mov                  rsi,                  rdi
     sub                  rsi,                   10
     mov                  rdi,                  rsi
    push                   r8
    push                   r9
    call              int2chr
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r9
    push                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                   r9,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.50.if_true:
     mov                  rdi,                   48
     add                  rdi,                  rsi
    push                   r8
    push                   r9
    call              int2chr
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r9
    push                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                   r9,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.51.if_false:
     mov                  rdi,                   65
     add                  rdi,                  rsi
     mov                  rsi,                  rdi
     sub                  rsi,                   10
     mov                  rdi,                  rsi
    push                   r8
    push                   r9
    call              int2chr
     pop                   r9
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r9
    push                   r8
     sub                  rsp,                    8
    call  __string_connection
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                   r9,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.53.loop_increment:
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.54.loop_condition:
     cmp                  rbx,                    0
     jge computeSHA1.49.loop_body
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.55.loop_exit:
     mov                  rsi,                   r9
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.56.exit:
     mov                  rdi,                  rsi
    push                   r8
     sub                  rsp,                    8
    call                print
     add                  rsp,                    8
     pop                   r8
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.6.loop_increment:
     add                   r8,                    1
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.7.loop_condition:
     mov                  rdi,                  r13
    push                   r8
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     cmp                   r8,                  rsi
      jl computeSHA1.5.loop_body
     mov                  rdi,      __string_const0
    call              println
     jmp   computeSHA1.9.exit
computeSHA1.8.loop_exit:
     mov                  rdi,      __string_const0
    call              println
computeSHA1.9.exit:
     pop                  rbx
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     add                  rsp,                   72
     pop                  rbp
     ret
toStringHex:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                    8
    push                  r12
    push                  r13
    push                  rbx
toStringHex.0.enter:
     mov                  r12,                  rdi
     mov                   r8,      __string_const4
     mov                  rbx,                   28
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.1.loop_body:
     mov                  rsi,                  r12
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     and                  rsi,                   15
     cmp                  rsi,                   10
      jl toStringHex.2.if_true
     mov                  rdi,                   65
     add                  rdi,                  rsi
     mov                  rsi,                  rdi
     sub                  rsi,                   10
     mov                  rdi,                  rsi
     cmp                  rdi,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne toStringHex.19.logical_false
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.2.if_true:
     mov                  rdi,                   48
     add                  rdi,                  rsi
     cmp                  rdi,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne toStringHex.11.logical_false
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.13.if_true
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.9.enter:
     cmp                  rdi,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne toStringHex.11.logical_false
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.13.if_true
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.10.logical_true:
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.13.if_true
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.11.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je toStringHex.13.if_true
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.12.logical_exit:
     cmp                  rsi,                    1
      je toStringHex.13.if_true
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.13.if_true:
     mov                  rsi,                  rdi
     sub                  rsi,                   32
     mov                  r13,                  rdi
     sub                  r13,                   32
     mov                  rdi, qword [@asciiTable - 0]
     mov                  rdx,                  r13
    push                   r8
     sub                  rsp,                    8
    call   __string_substring
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.15.if_exit:
     mov                  rsi,     __string_const16
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.16.exit:
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.3.if_false:
     mov                  rdi,                   65
     add                  rdi,                  rsi
     mov                  rsi,                  rdi
     sub                  rsi,                   10
     mov                  rdi,                  rsi
     cmp                  rdi,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne toStringHex.19.logical_false
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.17.enter:
     cmp                  rdi,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne toStringHex.19.logical_false
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.18.logical_true:
     cmp                  rdi,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.19.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.20.logical_exit:
     cmp                  rsi,                    1
      je toStringHex.21.if_true
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.21.if_true:
     mov                  rsi,                  rdi
     sub                  rsi,                   32
     mov                  r13,                  rdi
     sub                  r13,                   32
     mov                  rdi, qword [@asciiTable - 0]
     mov                  rdx,                  r13
    push                   r8
     sub                  rsp,                    8
    call   __string_substring
     add                  rsp,                    8
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.23.if_exit:
     mov                  rsi,     __string_const17
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.24.exit:
     mov                  rdi,                   r8
    call  __string_connection
     mov                  rsi,                  rax
     mov                   r8,                  rsi
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.5.loop_increment:
     mov                  rsi,                  rbx
     sub                  rsi,                    4
     mov                  rbx,                  rsi
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.6.loop_condition:
     cmp                  rbx,                    0
     jge toStringHex.1.loop_body
     mov                  rax,                   r8
     jmp   toStringHex.8.exit
toStringHex.7.loop_exit:
     mov                  rax,                   r8
toStringHex.8.exit:
     pop                  rbx
     pop                  r13
     pop                  r12
     add                  rsp,                    8
     pop                  rbp
     ret
sha1:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                   88
    push                  r12
    push                  r14
    push                  r13
    push                  r15
    push                  rbx
sha1.0.enter:
     mov                  r12,                  rdi
     mov                  rbx,                  rsi
     mov                  rsi,                  rbx
     add                  rsi,                   64
     sub                  rsi,                   56
     sar                  rsi,                    6
     add                  rsi,                    1
     mov      qword [rbp - 8],                  rsi
     mov                  rax,      qword [rbp - 8]
     cmp                  rax, qword [@MAXCHUNK - 0]
      jg       sha1.1.if_true
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.1.if_true:
     mov                  rdi,      __string_const5
    call              println
     mov                  rax,                    0
     jmp         sha1.37.exit
sha1.3.if_exit:
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.4.loop_body:
     mov                  r13,                    0
     cmp                  r13,                   80
      jl     sha1.5.loop_body
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.5.loop_body:
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r9,  qword [@chunks - 0]
     add                   r9,                  rsi
     mov                   r8,                  r13
     sal                   r8,                    3
     mov                  rsi,       qword [r9 - 0]
     add                  rsi,                   r8
     mov      qword [rsi - 0],                    0
     add                  r13,                    1
     cmp                  r13,                   80
      jl     sha1.5.loop_body
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.6.loop_increment:
     add                  r13,                    1
     cmp                  r13,                   80
      jl     sha1.5.loop_body
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.7.loop_condition:
     cmp                  r13,                   80
      jl     sha1.5.loop_body
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.9.loop_increment:
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.10.loop_condition:
     cmp                  rdi,      qword [rbp - 8]
      jl     sha1.4.loop_body
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.11.loop_exit:
     mov                  rdi,                    0
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.12.loop_body:
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r13,       qword [r8 - 0]
     add                  r13,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     mov                   r9,                  rsi
     sal                   r9,                    3
     mov                  rsi,       qword [r8 - 0]
     add                  rsi,                   r9
     mov                   r8,                  rdi
     sal                   r8,                    3
     mov                  r14,                  r12
     add                  r14,                   r8
     mov                   r8,                  rdi
     mov                  rax,                   r8
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                   r8,                  rdx
     mov                   r9,                    3
     sub                   r9,                   r8
     mov                   r8,                   r9
    imul                   r8,                    8
     mov                   r9,      qword [r14 - 0]
     mov                  rcx,                   r8
     sal                   r9,                   cl
     mov                  rsi,      qword [rsi - 0]
      or                  rsi,                   r9
     mov      qword [r13 - 0],                  rsi
     add                  rdi,                    1
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.13.loop_increment:
     add                  rdi,                    1
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.14.loop_condition:
     cmp                  rdi,                  rbx
      jl    sha1.12.loop_body
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.15.loop_exit:
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                   r8,      qword [r12 - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sar                  rsi,                    6
     sal                  rsi,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                   64
     cqo
    idiv                  rcx
     mov                  rsi,                  rdx
     sar                  rsi,                    2
     sal                  rsi,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rsi
     mov                  rax,                  rdi
     mov                  rcx,                    4
     cqo
    idiv                  rcx
     mov                  rdi,                  rdx
     mov                  rsi,                    3
     sub                  rsi,                  rdi
    imul                  rsi,                    8
     mov                  rdi,                  128
     mov                  rcx,                  rsi
     sal                  rdi,                   cl
     mov                  rsi,      qword [r12 - 0]
      or                  rsi,                  rdi
     mov       qword [r8 - 0],                  rsi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  r12,                   15
     sal                  r12,                    3
     mov                  rsi,      qword [rdi - 0]
     add                  rsi,                  r12
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov      qword [rsi - 0],                  rdi
     mov                  rsi,      qword [rbp - 8]
     sub                  rsi,                    1
     sal                  rsi,                    3
     mov                  rdi,  qword [@chunks - 0]
     add                  rdi,                  rsi
     mov                  rsi,                   14
     sal                  rsi,                    3
     mov                  rdi,      qword [rdi - 0]
     add                  rdi,                  rsi
     mov                  rsi,                  rbx
     sar                  rsi,                   29
     and                  rsi,                    7
     mov      qword [rdi - 0],                  rsi
     mov     qword [rbp - 32],           1732584193
     mov                  r12,                43913
     mov                  rsi,                61389
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.38.enter:
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.39.exit:
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                56574
     mov                  rsi,                39098
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.40.enter:
     sal                  rsi,                   16
     mov                  rbx,                  r12
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.41.exit:
     mov                  r14,                  rsi
     mov                  r10,            271733878
     mov                  r12,                57840
     mov                  rsi,                50130
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.42.enter:
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                  r12
      or                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.43.exit:
     mov     qword [rbp - 48],                  rsi
     mov                  rdi,                    0
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.16.loop_body:
     mov                  r13,                   16
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.17.loop_body:
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                  rbx,  qword [@chunks - 0]
     add                  rbx,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,      qword [rbx - 0]
     add                   r8,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                  rbx,  qword [@chunks - 0]
     add                  rbx,                  rsi
     mov                  rsi,                  r13
     sub                  rsi,                    3
     sal                  rsi,                    3
     mov                  r12,      qword [rbx - 0]
     add                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                  rbx,  qword [@chunks - 0]
     add                  rbx,                  rsi
     mov                  rsi,                  r13
     sub                  rsi,                    8
     sal                  rsi,                    3
     mov                  rbx,      qword [rbx - 0]
     add                  rbx,                  rsi
     mov                  rsi,      qword [r12 - 0]
     xor                  rsi,      qword [rbx - 0]
     mov                  rbx,                  rdi
     sal                  rbx,                    3
     mov                  r12,  qword [@chunks - 0]
     add                  r12,                  rbx
     mov                  rbx,                  r13
     sub                  rbx,                   14
     sal                  rbx,                    3
     mov                  r12,      qword [r12 - 0]
     add                  r12,                  rbx
     mov                  rbx,                  rsi
     xor                  rbx,      qword [r12 - 0]
     mov                  r12,                  rdi
     sal                  r12,                    3
     mov                  rsi,  qword [@chunks - 0]
     add                  rsi,                  r12
     mov                  r12,                  r13
     sub                  r12,                   16
     sal                  r12,                    3
     mov                  rsi,      qword [rsi - 0]
     add                  rsi,                  r12
     xor                  rbx,      qword [rsi - 0]
     mov                  r11,                  rbx
     mov                   r9,                    1
     cmp                   r9,                    1
      je      sha1.45.if_true
     cmp                   r9,                   31
      je      sha1.48.if_true
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  rbx,                    1
     mov                  rcx,                  rsi
     sal                  rbx,                   cl
     mov                  rsi,                  rbx
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  r12,                  r11
     mov                  rcx,                  rsi
     sar                  r12,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  r12,                  rsi
     mov                  rsi,                  rbx
      or                  rsi,                  r12
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.44.enter:
     cmp                   r9,                    1
      je      sha1.45.if_true
     cmp                   r9,                   31
      je      sha1.48.if_true
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  rbx,                    1
     mov                  rcx,                  rsi
     sal                  rbx,                   cl
     mov                  rsi,                  rbx
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  r12,                  r11
     mov                  rcx,                  rsi
     sar                  r12,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  r12,                  rsi
     mov                  rsi,                  rbx
      or                  rsi,                  r12
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     jmp    sha1.33.loop_exit
sha1.45.if_true:
     mov                  rsi,                  r11
     and                  rsi,           2147483647
     sal                  rsi,                    1
     mov                  rbx,                  r11
     sar                  rbx,                   31
     and                  rbx,                    1
      or                  rsi,                  rbx
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.81.exit
sha1.47.if_exit:
     cmp                   r9,                   31
      je      sha1.48.if_true
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  rbx,                    1
     mov                  rcx,                  rsi
     sal                  rbx,                   cl
     mov                  rsi,                  rbx
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  r12,                  r11
     mov                  rcx,                  rsi
     sar                  r12,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  r12,                  rsi
     mov                  rsi,                  rbx
      or                  rsi,                  r12
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     jmp        sha1.80.enter
sha1.48.if_true:
     mov                  rsi,                  r11
     and                  rsi,                    1
     sal                  rsi,                   31
     mov                  rbx,                  r11
     sar                  rbx,                    1
     and                  rbx,           2147483647
      or                  rsi,                  rbx
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.81.exit
sha1.50.if_exit:
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  rbx,                    1
     mov                  rcx,                  rsi
     sal                  rbx,                   cl
     mov                  rsi,                  rbx
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r9
     mov                  r12,                  r11
     mov                  rcx,                  rsi
     sar                  r12,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  r12,                  rsi
     mov                  rsi,                  rbx
      or                  rsi,                  r12
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.81.exit
sha1.51.exit:
     mov       qword [r8 - 0],                  rsi
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     jmp        sha1.82.enter
sha1.18.loop_increment:
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.19.loop_condition:
     cmp                  r13,                   80
      jl    sha1.17.loop_body
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.20.loop_exit:
     mov                  rax,     qword [rbp - 32]
     mov     qword [rbp - 64],                  rax
     mov                  rax,     qword [rbp - 40]
     mov     qword [rbp - 72],                  rax
     mov                  rbx,                  r14
     mov     qword [rbp - 80],                  r10
     mov                   r8,     qword [rbp - 48]
     mov                  r13,                    0
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.21.loop_body:
     cmp                  r13,                   20
      jl      sha1.22.if_true
     cmp                  r13,                   40
      jl      sha1.24.if_true
     cmp                  r13,                   60
      jl      sha1.26.if_true
     mov                  rsi,     qword [rbp - 72]
     xor                  rsi,                  rbx
     xor                  rsi,     qword [rbp - 80]
     mov                  r15,                  rsi
     mov                  r12,                49622
     mov                  rsi,                51810
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     jmp         sha1.69.exit
sha1.22.if_true:
     mov                  rsi,     qword [rbp - 72]
     and                  rsi,                  rbx
     mov                  r12,     qword [rbp - 72]
     not                  r12
     and                  r12,     qword [rbp - 80]
      or                  rsi,                  r12
     mov                  r15,                  rsi
     mov     qword [rbp - 88],           1518500249
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     jmp      sha1.78.if_exit
sha1.23.if_false:
     cmp                  r13,                   40
      jl      sha1.24.if_true
     cmp                  r13,                   60
      jl      sha1.26.if_true
     mov                  rsi,     qword [rbp - 72]
     xor                  rsi,                  rbx
     xor                  rsi,     qword [rbp - 80]
     mov                  r15,                  rsi
     mov                  r12,                49622
     mov                  rsi,                51810
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     jmp      sha1.62.if_exit
sha1.24.if_true:
     mov                  rsi,     qword [rbp - 72]
     xor                  rsi,                  rbx
     xor                  rsi,     qword [rbp - 80]
     mov                  r15,                  rsi
     mov     qword [rbp - 88],           1859775393
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     jmp      sha1.78.if_exit
sha1.25.if_false:
     cmp                  r13,                   60
      jl      sha1.26.if_true
     mov                  rsi,     qword [rbp - 72]
     xor                  rsi,                  rbx
     xor                  rsi,     qword [rbp - 80]
     mov                  r15,                  rsi
     mov                  r12,                49622
     mov                  rsi,                51810
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     jmp         sha1.63.exit
sha1.26.if_true:
     mov                  rsi,     qword [rbp - 72]
     and                  rsi,                  rbx
     mov                  r12,     qword [rbp - 72]
     and                  r12,     qword [rbp - 80]
      or                  rsi,                  r12
     mov                  r12,                  rbx
     and                  r12,     qword [rbp - 80]
      or                  rsi,                  r12
     mov                  r15,                  rsi
     mov                  r12,                48348
     mov                  rsi,                36635
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     jmp        sha1.64.enter
sha1.52.enter:
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     jmp        sha1.82.enter
sha1.53.exit:
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     jmp      sha1.78.if_exit
sha1.27.if_false:
     mov                  rsi,     qword [rbp - 72]
     xor                  rsi,                  rbx
     xor                  rsi,     qword [rbp - 80]
     mov                  r15,                  rsi
     mov                  r12,                49622
     mov                  rsi,                51810
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     jmp        sha1.64.enter
sha1.54.enter:
     sal                  rsi,                   16
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     jmp        sha1.82.enter
sha1.55.exit:
     mov     qword [rbp - 88],                  rsi
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     jmp      sha1.78.if_exit
sha1.30.if_exit:
     mov                  r11,     qword [rbp - 64]
     mov                   r9,                    5
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     jmp         sha1.79.exit
sha1.56.enter:
     cmp                   r9,                    1
      je      sha1.57.if_true
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     jmp sha1.31.loop_increment
sha1.57.if_true:
     mov                  rsi,                  r11
     and                  rsi,           2147483647
     mov                  r12,                  rsi
     sal                  r12,                    1
     mov                  rsi,                  r11
     sar                  rsi,                   31
     and                  rsi,                    1
      or                  r12,                  rsi
     mov                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     jmp    sha1.33.loop_exit
sha1.59.if_exit:
     cmp                   r9,                   31
      je      sha1.60.if_true
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     jmp sha1.32.loop_condition
sha1.60.if_true:
     mov                  rsi,                  r11
     and                  rsi,                    1
     sal                  rsi,                   31
     mov                  r12,                  r11
     sar                  r12,                    1
     and                  r12,           2147483647
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     jmp    sha1.33.loop_exit
sha1.62.if_exit:
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  r12
     sal                  rsi,                   cl
     mov                  r12,                  rsi
     sub                  r12,                    1
     mov                  rsi,                  r11
     and                  rsi,                  r12
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     mov                  r12,                   32
     sub                  r12,                   r9
     mov                  rcx,                  r12
     sar                  r11,                   cl
     mov                  r12,                    1
     mov                  rcx,                   r9
     sal                  r12,                   cl
     sub                  r12,                    1
     mov                   r9,                  r11
     and                   r9,                  r12
      or                  rsi,                   r9
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     jmp    sha1.33.loop_exit
sha1.63.exit:
     mov                  r12,                  rsi
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     jmp        sha1.80.enter
sha1.64.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                   r8,                  rsi
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.81.exit
sha1.65.exit:
     mov                  r12,                  r15
     mov                  r11,     qword [rbp - 88]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     jmp        sha1.82.enter
sha1.66.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r9,                  r11
     and                   r9,                65535
     add                  rsi,                   r9
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.83.exit
sha1.67.exit:
     mov                  r12,                   r8
     mov                  r11,                  rsi
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     jmp        sha1.84.enter
sha1.68.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                   r8,                  r11
     and                   r8,                65535
     add                  rsi,                   r8
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.69.exit:
     mov                  rsi,                  rdi
     sal                  rsi,                    3
     mov                   r8,  qword [@chunks - 0]
     add                   r8,                  rsi
     mov                  rsi,                  r13
     sal                  rsi,                    3
     mov                   r8,       qword [r8 - 0]
     add                   r8,                  rsi
     mov                  r11,       qword [r8 - 0]
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.70.enter:
     mov                   r8,                  r12
     and                   r8,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                   r8,                  rsi
     mov                   r9,                   r8
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     jmp    sha1.33.loop_exit
sha1.71.exit:
     mov                  r12,                  rsi
     mov                   r8,     qword [rbp - 80]
     mov     qword [rbp - 80],                  rbx
     mov                  r11,     qword [rbp - 72]
     mov                   r9,                   30
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     jmp        sha1.80.enter
sha1.72.enter:
     cmp                   r9,                    1
      je      sha1.73.if_true
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     jmp         sha1.81.exit
sha1.73.if_true:
     mov                  rsi,                  r11
     and                  rsi,           2147483647
     sal                  rsi,                    1
     mov                  rbx,                  r11
     sar                  rbx,                   31
     and                  rbx,                    1
      or                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.75.if_exit:
     cmp                   r9,                   31
      je      sha1.76.if_true
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     jmp        sha1.82.enter
sha1.76.if_true:
     mov                  rsi,                  r11
     and                  rsi,                    1
     sal                  rsi,                   31
     mov                  rbx,                  r11
     sar                  rbx,                    1
     and                  rbx,           2147483647
      or                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.78.if_exit:
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                    1
     mov                  rcx,                  rbx
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                  rbx,                  r11
     and                  rbx,                  rsi
     mov                  r15,                  rbx
     mov                  rcx,                   r9
     sal                  r15,                   cl
     mov                  rbx,                   32
     sub                  rbx,                   r9
     mov                  rsi,                  r11
     mov                  rcx,                  rbx
     sar                  rsi,                   cl
     mov                  rbx,                    1
     mov                  rcx,                   r9
     sal                  rbx,                   cl
     sub                  rbx,                    1
     and                  rsi,                  rbx
     mov                  rbx,                  r15
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.79.exit:
     mov                  rbx,                  rsi
     mov                  rax,     qword [rbp - 64]
     mov     qword [rbp - 72],                  rax
     mov     qword [rbp - 64],                  r12
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.31.loop_increment:
     add                  r13,                    1
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.32.loop_condition:
     cmp                  r13,                   80
      jl    sha1.21.loop_body
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.33.loop_exit:
     mov                  r12,     qword [rbp - 32]
     mov                  r11,     qword [rbp - 64]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.80.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.81.exit:
     mov     qword [rbp - 32],                  rsi
     mov                  r12,     qword [rbp - 40]
     mov                  r11,     qword [rbp - 72]
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.82.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  r13,                  r11
     and                  r13,                65535
     add                  rsi,                  r13
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  r12,                  r11
     sar                  r12,                   16
     and                  r12,                65535
     add                  rsi,                  r12
     mov                  r12,                   r9
     sar                  r12,                   16
     add                  rsi,                  r12
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  r12,                   r9
     and                  r12,                65535
      or                  rsi,                  r12
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.83.exit:
     mov     qword [rbp - 40],                  rsi
     mov                  r12,                  r14
     mov                  r11,                  rbx
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.84.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     sal                  rsi,                   16
     mov                  rbx,                   r9
     and                  rbx,                65535
      or                  rsi,                  rbx
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.85.exit:
     mov                  r14,                  rsi
     mov                  r12,                  r10
     mov                  r11,     qword [rbp - 80]
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.86.enter:
     mov                  rbx,                  r12
     and                  rbx,                65535
     mov                  rsi,                  r11
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                   r9,                  rbx
     mov                  rsi,                  r12
     sar                  rsi,                   16
     and                  rsi,                65535
     mov                  rbx,                  r11
     sar                  rbx,                   16
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                  rbx,                   r9
     sar                  rbx,                   16
     add                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.87.exit:
     mov                  r10,                  rsi
     mov                  r12,     qword [rbp - 48]
     mov                  r11,                   r8
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.88.enter:
     mov                  rsi,                  r12
     and                  rsi,                65535
     mov                  rbx,                  r11
     and                  rbx,                65535
     add                  rsi,                  rbx
     mov                   r9,                  rsi
     mov                  rsi,                  r12
     sar                  rsi,                   16
     mov                  rbx,                  rsi
     and                  rbx,                65535
     mov                  rsi,                  r11
     sar                  rsi,                   16
     and                  rsi,                65535
     add                  rbx,                  rsi
     mov                  rsi,                   r9
     sar                  rsi,                   16
     add                  rbx,                  rsi
     mov                  rsi,                  rbx
     and                  rsi,                65535
     mov                  rbx,                  rsi
     sal                  rbx,                   16
     mov                  rsi,                   r9
     and                  rsi,                65535
      or                  rbx,                  rsi
     mov                  rsi,                  rbx
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.89.exit:
     mov     qword [rbp - 48],                  rsi
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.34.loop_increment:
     add                  rdi,                    1
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.35.loop_condition:
     cmp                  rdi,      qword [rbp - 8]
      jl    sha1.16.loop_body
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
     jmp         sha1.37.exit
sha1.36.loop_exit:
     mov                  rsi,                    0
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 32]
     mov      qword [rbx - 0],                  rax
     mov                  rbx,                    1
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov                  rax,     qword [rbp - 40]
     mov      qword [rsi - 0],                  rax
     mov                  rbx,                    2
     sal                  rbx,                    3
     mov                  rsi, qword [@outputBuffer - 0]
     add                  rsi,                  rbx
     mov      qword [rsi - 0],                  r14
     mov                  rsi,                    3
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov      qword [rbx - 0],                  r10
     mov                  rsi,                    4
     sal                  rsi,                    3
     mov                  rbx, qword [@outputBuffer - 0]
     add                  rbx,                  rsi
     mov                  rax,     qword [rbp - 48]
     mov      qword [rbx - 0],                  rax
     mov                  rax, qword [@outputBuffer - 0]
sha1.37.exit:
     pop                  rbx
     pop                  r15
     pop                  r13
     pop                  r14
     pop                  r12
     add                  rsp,                   88
     pop                  rbp
     ret
array_equal:
    push                  rbp
     mov                  rbp,                  rsp
    push                  r12
    push                  r13
    push                  rbx
array_equal.0.enter:
     mov                   r8,                  rdi
     mov                  r12,                  rsi
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     mov                  rdi,                  r12
    push                   r8
    push                  rsi
     sub                  rsp,                    8
    call         __array_size
     add                  rsp,                    8
     pop                  rsi
     pop                   r8
     mov                  rbx,                  rax
     cmp                  rsi,                  rbx
     jne array_equal.1.if_true
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl array_equal.4.loop_body
     mov                  rax,                    1
     jmp  array_equal.11.exit
array_equal.1.if_true:
     mov                  rax,                    0
     jmp  array_equal.11.exit
array_equal.3.if_exit:
     mov                  rbx,                    0
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl array_equal.4.loop_body
     mov                  rax,                    1
     jmp  array_equal.11.exit
array_equal.4.loop_body:
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov                  rsi,                   r8
     add                  rsi,                  rdi
     mov                  rdi,                  rbx
     sal                  rdi,                    3
     mov                  r13,                  r12
     add                  r13,                  rdi
     mov                  rsi,      qword [rsi - 0]
     cmp                  rsi,      qword [r13 - 0]
     jne array_equal.5.if_true
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl array_equal.4.loop_body
     mov                  rax,                    1
     jmp  array_equal.11.exit
array_equal.5.if_true:
     mov                  rax,                    0
     jmp  array_equal.11.exit
array_equal.8.loop_increment:
     add                  rbx,                    1
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl array_equal.4.loop_body
     mov                  rax,                    1
     jmp  array_equal.11.exit
array_equal.9.loop_condition:
     mov                  rdi,                   r8
    push                   r8
    call         __array_size
     pop                   r8
     mov                  rsi,                  rax
     cmp                  rbx,                  rsi
      jl array_equal.4.loop_body
     mov                  rax,                    1
     jmp  array_equal.11.exit
array_equal.10.loop_exit:
     mov                  rax,                    1
array_equal.11.exit:
     pop                  rbx
     pop                  r13
     pop                  r12
     pop                  rbp
     ret
int2chr:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                    8
    push                  rbx
int2chr.0.enter:
     mov                  rbx,                  rdi
     cmp                  rbx,                   32
     mov                  rsi,                    0
   setge                  sil
     cmp                  rsi,                    1
     jne int2chr.2.logical_false
     cmp                  rbx,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je    int2chr.4.if_true
     mov                  rax,      __string_const6
     jmp       int2chr.7.exit
int2chr.1.logical_true:
     cmp                  rbx,                  126
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je    int2chr.4.if_true
     mov                  rax,      __string_const6
     jmp       int2chr.7.exit
int2chr.2.logical_false:
     mov                  rsi,                    0
     cmp                  rsi,                    1
      je    int2chr.4.if_true
     mov                  rax,      __string_const6
     jmp       int2chr.7.exit
int2chr.3.logical_exit:
     cmp                  rsi,                    1
      je    int2chr.4.if_true
     mov                  rax,      __string_const6
     jmp       int2chr.7.exit
int2chr.4.if_true:
     mov                  rsi,                  rbx
     sub                  rsi,                   32
     sub                  rbx,                   32
     mov                  rdi, qword [@asciiTable - 0]
     mov                  rdx,                  rbx
    call   __string_substring
     mov                  rsi,                  rax
     mov                  rax,                  rsi
     jmp       int2chr.7.exit
int2chr.6.if_exit:
     mov                  rax,      __string_const6
int2chr.7.exit:
     pop                  rbx
     add                  rsp,                    8
     pop                  rbp
     ret
rotate_left:
    push                  rbp
     mov                  rbp,                  rsp
rotate_left.0.enter:
     mov                   r8,                  rsi
     cmp                   r8,                    1
      je rotate_left.1.if_true
     cmp                   r8,                   31
      je rotate_left.4.if_true
     mov                   r9,                   32
     sub                   r9,                   r8
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                   r9,                  rdi
     and                   r9,                  rsi
     mov                  rcx,                   r8
     sal                   r9,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r8
     mov                  rcx,                  rsi
     sar                  rdi,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r8
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  rdi,                  rsi
     mov                  rsi,                   r9
      or                  rsi,                  rdi
     mov                  rax,                  rsi
     jmp   rotate_left.7.exit
rotate_left.1.if_true:
     mov                  rsi,                  rdi
     and                  rsi,           2147483647
     sal                  rsi,                    1
     sar                  rdi,                   31
     and                  rdi,                    1
      or                  rsi,                  rdi
     mov                  rax,                  rsi
     jmp   rotate_left.7.exit
rotate_left.3.if_exit:
     cmp                   r8,                   31
      je rotate_left.4.if_true
     mov                   r9,                   32
     sub                   r9,                   r8
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                   r9,                  rdi
     and                   r9,                  rsi
     mov                  rcx,                   r8
     sal                   r9,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r8
     mov                  rcx,                  rsi
     sar                  rdi,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r8
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  rdi,                  rsi
     mov                  rsi,                   r9
      or                  rsi,                  rdi
     mov                  rax,                  rsi
     jmp   rotate_left.7.exit
rotate_left.4.if_true:
     mov                  rsi,                  rdi
     and                  rsi,                    1
     sal                  rsi,                   31
     sar                  rdi,                    1
     and                  rdi,           2147483647
      or                  rsi,                  rdi
     mov                  rax,                  rsi
     jmp   rotate_left.7.exit
rotate_left.6.if_exit:
     mov                   r9,                   32
     sub                   r9,                   r8
     mov                  rsi,                    1
     mov                  rcx,                   r9
     sal                  rsi,                   cl
     sub                  rsi,                    1
     mov                   r9,                  rdi
     and                   r9,                  rsi
     mov                  rcx,                   r8
     sal                   r9,                   cl
     mov                  rsi,                   32
     sub                  rsi,                   r8
     mov                  rcx,                  rsi
     sar                  rdi,                   cl
     mov                  rsi,                    1
     mov                  rcx,                   r8
     sal                  rsi,                   cl
     sub                  rsi,                    1
     and                  rdi,                  rsi
     mov                  rsi,                   r9
      or                  rsi,                  rdi
     mov                  rax,                  rsi
rotate_left.7.exit:
     pop                  rbp
     ret
lohi:
    push                  rbp
     mov                  rbp,                  rsp
lohi.0.enter:
     mov                   r8,                  rsi
     sal                   r8,                   16
     mov                  rsi,                  rdi
      or                  rsi,                   r8
     mov                  rax,                  rsi
lohi.1.exit:
     pop                  rbp
     ret
@GlobalDeclaration:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                   48
@GlobalDeclaration.0.enter:
     mov qword [@asciiTable - 0],      __string_const7
     mov qword [@MAXCHUNK - 0],                  100
     mov                  rsi, qword [@MAXCHUNK - 0]
     sub                  rsi,                    1
    imul                  rsi,                   64
     sub                  rsi,                   16
     mov qword [@MAXLENGTH - 0],                  rsi
     mov                  rdi, qword [@MAXCHUNK - 0]
     add                  rdi,                    1
     sal                  rdi,                    3
    push                  rdi
    push                   r9
    call               malloc
     pop                   r9
     pop                  rdi
     mov                   r9,                  rax
     mov                  rsi, qword [@MAXCHUNK - 0]
     mov       qword [r9 - 0],                  rsi
     add                   r9,                    8
     mov                  rsi,                   r9
     mov                   r8,                   r9
     sub                  rdi,                    8
     add                   r8,                  rdi
     cmp                  rsi,                   r8
      jl @GlobalDeclaration.1.allocate_body
     mov  qword [@chunks - 0],                   r9
     mov                  rsi, qword [@MAXLENGTH - 0]
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rdi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov                  rsi, qword [@MAXLENGTH - 0]
     mov      qword [rdi - 0],                  rsi
     add                  rdi,                    8
     mov qword [@inputBuffer - 0],                  rdi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov qword [@outputBuffer - 0],                  rsi
     jmp @GlobalDeclaration.4.exit
@GlobalDeclaration.1.allocate_body:
     mov                  rdi,                   80
     add                  rdi,                    1
     sal                  rdi,                    3
    push                   r8
    push                  rdi
    push                   r9
    push                  rsi
    call               malloc
     pop                  rsi
     pop                   r9
     pop                  rdi
     pop                   r8
     mov                  rdi,                  rax
     mov      qword [rdi - 0],                   80
     add                  rdi,                    8
     mov      qword [rsi - 0],                  rdi
     add                  rsi,                    8
     cmp                  rsi,                   r8
      jl @GlobalDeclaration.1.allocate_body
     mov  qword [@chunks - 0],                   r9
     mov                  rsi, qword [@MAXLENGTH - 0]
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rdi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov                  rsi, qword [@MAXLENGTH - 0]
     mov      qword [rdi - 0],                  rsi
     add                  rdi,                    8
     mov qword [@inputBuffer - 0],                  rdi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov qword [@outputBuffer - 0],                  rsi
     jmp @GlobalDeclaration.4.exit
@GlobalDeclaration.2.allocate_condition:
     cmp                  rsi,                   r8
      jl @GlobalDeclaration.1.allocate_body
     mov  qword [@chunks - 0],                   r9
     mov                  rsi, qword [@MAXLENGTH - 0]
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rdi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov                  rsi, qword [@MAXLENGTH - 0]
     mov      qword [rdi - 0],                  rsi
     add                  rdi,                    8
     mov qword [@inputBuffer - 0],                  rdi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov qword [@outputBuffer - 0],                  rsi
     jmp @GlobalDeclaration.4.exit
@GlobalDeclaration.3.allocate_exit:
     mov  qword [@chunks - 0],                   r9
     mov                  rsi, qword [@MAXLENGTH - 0]
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rdi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rdi
     mov                  rdi,                  rax
     mov                  rsi, qword [@MAXLENGTH - 0]
     mov      qword [rdi - 0],                  rsi
     add                  rdi,                    8
     mov qword [@inputBuffer - 0],                  rdi
     mov                  rsi,                    5
     add                  rsi,                    1
     sal                  rsi,                    3
    push                  rsi
     mov                  rdi,                  rsi
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     pop                  rsi
     mov                  rsi,                  rax
     mov      qword [rsi - 0],                    5
     add                  rsi,                    8
     mov qword [@outputBuffer - 0],                  rsi
@GlobalDeclaration.4.exit:
     add                  rsp,                   48
     pop                  rbp
     ret
nextLetter:
    push                  rbp
     mov                  rbp,                  rsp
nextLetter.0.enter:
     mov                  rsi,                  rdi
     cmp                  rsi,                  122
      je nextLetter.1.if_true
     cmp                  rsi,                   90
      je nextLetter.4.if_true
     cmp                  rsi,                   57
      je nextLetter.7.if_true
     add                  rsi,                    1
     mov                  rax,                  rsi
     jmp   nextLetter.10.exit
nextLetter.1.if_true:
     mov                  rsi,                    1
     neg                  rsi
     mov                  rax,                  rsi
     jmp   nextLetter.10.exit
nextLetter.3.if_exit:
     cmp                  rsi,                   90
      je nextLetter.4.if_true
     cmp                  rsi,                   57
      je nextLetter.7.if_true
     add                  rsi,                    1
     mov                  rax,                  rsi
     jmp   nextLetter.10.exit
nextLetter.4.if_true:
     mov                  rax,                   97
     jmp   nextLetter.10.exit
nextLetter.6.if_exit:
     cmp                  rsi,                   57
      je nextLetter.7.if_true
     add                  rsi,                    1
     mov                  rax,                  rsi
     jmp   nextLetter.10.exit
nextLetter.7.if_true:
     mov                  rax,                   65
     jmp   nextLetter.10.exit
nextLetter.9.if_exit:
     add                  rsi,                    1
     mov                  rax,                  rsi
nextLetter.10.exit:
     pop                  rbp
     ret
SECTION .data
      dq                    0
__string_const0:
      db                "", 0
      dq                   13
__string_const1:
      db   "Invalid input", 0
      dq                    0
__string_const2:
      db                "", 0
      dq                   10
__string_const3:
      db      "Not Found!", 0
      dq                    0
__string_const4:
      db                "", 0
      dq                   18
__string_const5:
      db "nChunk > MAXCHUNK!", 0
      dq                    0
__string_const6:
      db                "", 0
      dq                   97
__string_const7:
      db " !", 34, "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[", 92, "]^_`abcdefghijklmnopqrstuvwxyz{|}~", 0
      dq                    0
__string_const8:
      db                "", 0
      dq                   13
__string_const9:
      db   "Invalid input", 0
      dq                    0
__string_const10:
      db                "", 0
      dq                   10
__string_const11:
      db      "Not Found!", 0
      dq                   18
__string_const12:
      db "nChunk > MAXCHUNK!", 0
      dq                    0
__string_const13:
      db                "", 0
      dq                   18
__string_const14:
      db "nChunk > MAXCHUNK!", 0
      dq                    0
__string_const15:
      db                "", 0
      dq                    0
__string_const16:
      db                "", 0
      dq                    0
__string_const17:
      db                "", 0
SECTION .bss
@asciiTable:
    resq                    1
@MAXCHUNK:
    resq                    1
@MAXLENGTH:
    resq                    1
@chunks:
    resq                    1
@inputBuffer:
    resq                    1
@outputBuffer:
    resq                    1
SECTION .text
print_Int:
     mov                  rsi,                  rdi
     mov                  rdi,    __print_IntFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println_Int:
     mov                  rsi,                  rdi
     mov                  rdi,  __println_IntFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
print:
     mov                  rsi,                  rdi
     mov                  rdi,        __printFormat
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println:
     sub                  rsp,                    8
    call                 puts
     add                  rsp,                    8
     ret
getInt:
     mov                  rdi,       __getIntFormat
     mov                  rsi,           @getIntBuf
     sub                  rsp,                    8
    call                scanf
     add                  rsp,                    8
     mov                  rax,   qword [@getIntBuf]
     ret
getString:
    push                  r15
     mov                  rdi,                  300
    call               malloc
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,    __getStringFormat
     mov                  rsi,                  r15
    call                scanf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
toString:
    push                  r15
    push                  rdi
     mov                  rdi,                   20
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,     __toStringFormat
     pop                  rdx
    call              sprintf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
__array_size:
     mov                  rax,      qword [rdi - 8]
     ret
__string_length:
     mov                  rax,      qword [rdi - 8]
     ret
__string_parseInt:
     mov                  rsi,       __getIntFormat
     mov                  rdx,         @parseIntBuf
     sub                  rsp,                    8
    call               sscanf
     add                  rsp,                    8
     mov                  rax, qword [@parseIntBuf]
     ret
__string_substring:
    push                  r15
    push                  r14
     mov                  r15,                  rdi
     add                  r15,                  rsi
     mov                  r14,                  rdx
     sub                  r14,                  rsi
     add                  r14,                    1
     mov                  rdi,                  r14
     add                  rdi,                    9
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     add                  rax,                    8
     mov                  rdi,                  rax
     mov                  rsi,                  r15
     mov                  rdx,                  r14
     sub                  rsp,                    8
    call               memcpy
     add                  rsp,                    8
     mov      qword [rax - 8],                  r14
     mov                  r15,                  rax
     add                  r15,                  r14
     mov                  r15,                    0
     pop                  r14
     pop                  r15
     ret
__string_ord:
     add                  rdi,                  rsi
   movsx                  rax,           byte [rdi]
     ret
__string_connection:
    push                  r15
    push                  r14
    push                  r13
     mov                  r15,      qword [rdi - 8]
     add                  r15,      qword [rsi - 8]
     add                  r15,                    9
     mov                  r14,                  rdi
     mov                  r13,                  rsi
     mov                  rdi,                  r15
    call               malloc
     sub                  r15,                    9
     mov          qword [rax],                  r15
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,                  r14
    call               strcpy
     add                  r15,      qword [r14 - 8]
     mov                  r14,                  rax
     mov                  rdi,                  r15
     mov                  rsi,                  r13
    call               strcpy
     mov                  rax,                  r14
     pop                  r13
     pop                  r14
     pop                  r15
     ret
__string_EQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    sete                   al
     ret
__string_NEQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setne                   al
     ret
__string_GR:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    setg                   al
     ret
__string_GREQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setge                   al
     ret
__string_LE:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
    setl                   al
     ret
__string_LEEQ:
     sub                  rsp,                    8
    call               strcmp
     add                  rsp,                    8
     cmp                  eax,                    0
     mov                  rax,                    0
   setle                   al
     ret
SECTION .data
__println_IntFormat:
      db         "%ld", 10, 0
__print_IntFormat:
      db             "%ld", 0
__printFormat:
      db              "%s", 0
__getIntFormat:
      db             "%ld", 0
__getStringFormat:
      db              "%s", 0
__toStringFormat:
      db             "%ld", 0
__parseIntFormat:
      db             "%ld", 0
SECTION .bss
@getIntBuf:
    resq                    1
@parseIntBuf:
    resq                    1
